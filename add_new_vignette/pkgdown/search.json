[{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/about_pkgdown_documentation.html","id":null,"dir":"","previous_headings":"","what":"About this documentation","title":"About this documentation","text":"document generated version BioCro specified follows: Commit Hash: 1881f0e Commit Date: Wed, 19 Oct 2022 14:08:18 -0500 Branch: add_new_vignette Generation Date Time: Thu Nov 3 17:09:08 UTC 2022","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"dynamical-systems-real-and-mathematical","dir":"Articles","previous_headings":"","what":"Dynamical Systems: Real and Mathematical","title":"BioCro as a Dynamical System","text":"book Computation, Dynamics, Cognition (Giunti 1997), Giunti distinguishes real dynamical systems mathematical dynamical systems: real dynamical system real system changes time. Therefore, since real system can thought change time (respect), real system real dynamical system. mathematical dynamical system, hand, abstract mathematical structure can used describe change real system evolution series states. emphasized create mathematical system model real one, just quantifying attributes real system; also selecting attributes incorporate model ones ignore. endless variety attributes describe state real system, can’t even begin hope able model . stated Giunti quote, mathematical dynamical system describe change real system evolution series states. (now, interpret “series states” loosely, encompass models describe change continuous evolution system state well describe change terms discrete sequence states.) real usefulness mathematical structure, however, comes goes beyond merely describing series states: real power comes able derive complete picture evolution system partial knowledge system, knowledge possibly consisting , example, state system particular time, environment system operating, general knowledge processes determine system behaves.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"an-example-the-falling-body-problem","dir":"Articles","previous_headings":"Dynamical Systems: Real and Mathematical","what":"An example: the falling-body problem","title":"BioCro as a Dynamical System","text":"classic example physics falling-body problem: Given stationary, compact, relatively dense object dropped height \\(h_0\\) surface earth, height duration time \\(t\\)? partial knowledge system consists : initial height \\(h_0\\) object initial velocity \\(v_0\\) object (system, ’ll assume \\(v_0 = 0\\): object stationary begin .) magnitude, ’ll call \\(g\\), downward acceleration body caused earth’s gravitational field use function \\(h(t)\\) embody complete description evolution system—\\(h(t)\\) tells height body elapsed time \\(t\\)—initial knowledge system consists system equations putting certain constraints function \\(h\\):  \\[\\begin{align}   h(0)         & = h_0  \\notag \\\\   h'(t)|_{t=0} & = 0    \\label{eq:ode-system} \\\\   h''(t)       & = -g   \\notag \\end{align}\\]  (third constraint accurately written  \\[   h''(t) = -g \\quad\\text{\\emph{} h(t) > 0}, \\]  simplicity, consider system durations sufficiently small object yet hit ground.) Anyone studied differential equations immediately recognize initial-value problem, one whose unique solution  \\[   h(t) = h_0 - 1/2\\,gt^2. \\]  Thus, knowing initial height velocity object basic principles physics, able obtain complete description evolution “falling object” system time.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"some-comments-on-mathematical-abstraction","dir":"Articles","previous_headings":"Dynamical Systems: Real and Mathematical","what":"Some comments on mathematical abstraction","title":"BioCro as a Dynamical System","text":"mentioned, mathematical dynamical system purports model real system necessarily leave much . choosing attributes retain abstract model, two main considerations: First, attributes system interest us? model plant growth, might include, example, rate growth (mass accumulation) plant; nutrient energy content growing plant; impact group plants surrounding environment, including temperature \\(\\text{CO}_\\text{2}\\) content surrounding air, rate erosion soil substrate; resilience plant drought conditions. Second, attributes may particular intrinsic interest may help predicting behavior attributes interest. Returning falling-object model moment, primary object interest real falling object system height object given time, certain things system may safely ignore: color object time day, example, probably bearing trajectory object’s motion. hand, knowing velocity object given time crucial predicting height time, even may intrinsic interest knowing velocity. attributes bearing motion object (give examples) size shape object mass object air currents vicinity object’s path Italian experimenters 16th century demonstrated, weight compact relatively dense object little impact upon rate falls. turns , matter fact, predictive accuracy model, look height downward velocity object (ambient gravitational field) ignore attributes system, rather good case compact, relatively-dense objects. (’s good feathers.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"continuous-time-versus-discrete-time","dir":"Articles","previous_headings":"","what":"Continuous time versus discrete time","title":"BioCro as a Dynamical System","text":"system just shown—mathematical model real-world dynamical system—differential equation constraining solution exact solution easily-computable function. often, however, able find exact solution, settle numerical solution. show model falling-object system numerically, even though one case don’t really need resort methods.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"eulers-method","dir":"Articles","previous_headings":"Continuous time versus discrete time","what":"Euler’s method","title":"BioCro as a Dynamical System","text":"Euler’s method, basic methods numerical integration ordinary differential equations, may applied system current rate change state variables may expressed function current state. , use state variable mean quantifiable attribute system; state system conglomeration values variables particular time. Euler’s method makes assumption , given known state system particular time, state system small interval time later can closely approximated assuming rate change state variable remains essentially constant small time interval. \\(\\mathbf{s}\\) denotes state, \\(\\mathbf{s}(t)\\) denoting value time \\(t\\), \\(x\\) one state variables, \\(x(t)\\) denoting value time \\(t\\), , given  \\[   dx/dt = f(\\mathbf{s}), \\]  assume sufficiently small interval time \\(\\Delta t\\),  \\[   x(t+\\Delta t) \\approx x(t) + f(\\mathbf{s}(t))\\cdot\\Delta t. \\]","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"applying-eulers-method-to-the-falling-body-problem","dir":"Articles","previous_headings":"Continuous time versus discrete time","what":"Applying Euler’s method to the falling-body problem","title":"BioCro as a Dynamical System","text":"system equations \\(\\eqref{eq:ode-system}\\), \\(h\\) system variable. valid equation gives \\(dh/dt\\) function state state represented \\(h\\) alone. solve problem, also consider velocity part state. think state system snapshot system particular time, may seem somewhat counter-intuitive. clear might consider height object part snapshot, take notion “snapshot” literal sense, may seem odd consider velocity, rate change position, part snapshot: take literal snapshot, can’t know fast objects snapshot moving, least snapshot instantaneous. won’t dwell philosophical problem: bothers , imagine object speedometer attached snapshot shows position needle object falling. now, states system two components, height velocity, can think state \\(\\mathbf{s}\\) point 2-dimensional Euclidean space, ,  \\[   \\mathbf{s} = (s_0, s_1). \\]  identify height \\(h\\) first component \\(s_0\\) velocity \\(v\\) second component \\(s_1\\). consider \\(v\\) velocity upward direction object falling, \\(v < 0\\). write \\(v(t)\\) denote \\(v\\) function time. Since \\(v = dh/dt\\), can rewrite system \\(\\eqref{eq:ode-system}\\)  \\[\\begin{align}   dh/dt & = v   \\label{eq:deriv_h} \\\\   dv/dt & = -g  \\label{eq:deriv_v} \\\\   h(0)  & = h_0 \\notag \\\\   v(0)  & = 0   \\notag \\end{align}\\]  Now can use equations \\(\\eqref{eq:deriv_h}\\) \\(\\eqref{eq:deriv_v}\\) obtain Euler method formulas estimating state time \\(t + \\Delta t\\) state time \\(t\\):  \\[\\begin{align*}   h(t + \\Delta t) & = h(t) + v(t)\\cdot\\Delta t \\\\   v(t + \\Delta t) & = v(t) - g\\cdot\\Delta t \\end{align*}\\] Let us consider system sequence times \\(0 = t_0, t_1, t_2, t_3, \\dots\\) \\(\\), \\(t_{+ 1} = t_i + \\Delta t\\). , let write \\(\\delta\\) \\(\\Delta t\\), let \\(\\pi_0\\) \\(\\pi_1\\) denote projection state \\(\\mathbf{s}\\) onto components,  \\[\\begin{align}   \\pi_0(\\mathbf{s}) & = s_0 \\\\   \\intertext{}   \\pi_1(\\mathbf{s}) &= s_1. \\end{align}\\]  Now can write recursive definition state \\(\\mathbf{s}\\) function \\(t\\):  \\[\\begin{align}   \\mathbf{s}(t_0) &= (h_0, 0) \\notag \\\\   \\mathbf{s}(t_{+ 1}) &= (\\pi_0(\\mathbf{s}(t_i)) +  \\delta \\cdot \\pi_1(\\mathbf{s}(t_i)),                          \\pi_1(\\mathbf{s}(t_i)) - \\delta\\cdot g)\\quad\\text{$\\geq$0}.                          \\label{eq:falling_body_recursion} \\end{align}\\]","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"note-about-abstraction-and-recursive-systems","dir":"Articles","previous_headings":"Continuous time versus discrete time","what":"Note about abstraction and recursive systems","title":"BioCro as a Dynamical System","text":"just performed following abstraction arrive recursively-defined function giving state system function time:  \\[   \\begin{array}{c}     \\text{\\sc real system} \\\\     \\downarrow \\\\     \\text{\\sc continuous mathematical system (ODE system)} \\\\     \\downarrow \\\\     \\text{\\sc discrete-time approximation (recursive equations)}   \\end{array} \\]  pointed , however, discrete-time abstract dynamical systems arise abstractions real systems even abstractions continuous-time abstract systems. Consider, example, system state space \\(\\mathbf{Z}^2\\) consisting ordered pairs \\(\\mathbf{v} = (v_0, v_1)\\) integers, transition rule  \\[   \\mathbf{v}(t_{+ 1}) = (\\pi_1(\\mathbf{v}(t_i)), \\pi_0(\\mathbf{v}(t_i)) + \\pi_1(\\mathbf{v}(t_i))). \\]  Given initial state \\(\\mathbf{v}(t_0)\\), now way compute state \\(\\mathbf{v}(t_i)\\) time \\(t_i\\). abstract dynamical system may relationship real dynamical system might imagine, abstract dynamical system nevertheless. (take \\(\\mathbf{v}(t_0) = (0, 1)\\), way, function \\(F: \\mathbf{N}\\\\mathbf{Z}\\) defined rule  \\[   \\mapsto \\pi_0(\\mathbf{v}(t_i)) \\]  defines Fibonacci sequence \\(0, 1, 1, 2, 3, 5, 8, 13, \\dots\\,\\).) Another class discrete-time abstract dynamical systems cellular automata. , however, may value modeling real-world phenomena. (See, example, Deutsch (2005).)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"an-overview-of-some-abstract-dynamical-system-formulations","dir":"Articles","previous_headings":"","what":"An overview of some abstract dynamical system formulations","title":"BioCro as a Dynamical System","text":"section provide short survey formulations abstract dynamical system, along discussion BioCro’s terminology may differ sometimes unexpected ways terminology reader may used . (insightful thoroughly abstract mathematical study theory general systems, dynamical otherwise, see Mesarović Takahara (1975).)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"some-notational-preliminaries","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations","what":"Some notational preliminaries","title":"BioCro as a Dynamical System","text":"common, take \\(f: C \\B\\) mean “\\(f\\) function domain \\(C\\) taking values set \\(B\\).” Usually, means \\(f(c)\\) defined every \\(c\\C\\), follows, occasionally won’t always entirely strict . Following Vaught (1985), write \\(B^C\\) denote set functions \\(f\\).1 use \\(\\mathbf{R}\\), \\(\\mathbf{Z}\\), \\(\\mathbf{N}\\) denote real numbers, integers, natural numbers (finite ordinals, including zero), respectively. \\(\\mathbf{Z}^+\\) denotes positive integers. Following von Neumann, sometimes convenient identify natural number \\(n\\) set predecessors. example, \\(5 = \\{0, 1, 2, 3, 4\\}\\). particularly useful speaking Euclidian spaces. example, \\(\\mathbf{R}^3\\), Euclidean 3-space, usually thought set 3-coordinate vectors \\((x, y, z)\\). can equally well consider set mappings \\(v: \\{0,1,2\\}\\\\mathbf{R}\\), , using set--functions notation given , can denoted \\(\\mathbf{R}^{\\{0,1,2\\}}\\). (, using von Neumann’s notion ordinals, , , denoted \\(\\mathbf{R}^3\\), since \\(3=\\{0,1,2\\}\\)!) Thus, can identify 3-tuple \\((x,y,z)\\) mapping \\(v: \\{0,1,2\\}\\\\mathbf{R}\\), \\(v(0) = x\\), \\(v(1) = y\\), \\(v(2) = z\\). often write \\(v_i\\) place \\(v()\\) identify mapping \\(v: \\{0, 1, 2, \\dots, n-1\\}\\\\mathbf{R}\\) n-tuple n-coordinate vector \\(\\mathbf{v}=(v_0, v_1, v_2, \\dots, v_{n-1})\\). Often, however, level indirection involved use notation \\(v_i\\) coordinate \\(\\mathbf{v}\\). example, \\(\\mathbf{U}\\) proper subspace \\(\\mathbf{R}^n\\), \\(\\mathbf{U} = \\mathbf{R}^U\\) proper subset \\(U\\) \\(n = \\{0,1,\\dots,n-1\\}\\), may regard \\(u_i\\) value taken \\(\\)th member \\(U\\) arbitrary fixed ordering members \\(U\\). even allow case function domain \\(U\\) isn’t set intergers just finite collection objects. case, context considering vectors (qua mappings) \\(\\mathbf{v}\\\\mathbf{R}^U\\), \\(v_i\\) may denote alternately ’th member \\(U\\) fixed enumeration; name variable associated member; value ’th coordinate particular vector \\(\\mathbf{v}\\). later case, \\(v_i\\) doesn’t abbreviate \\(v()\\) function \\(v\\\\mathbf{R}^U\\). Rather, stands \\(v(u_i)\\), \\(u_i\\) denotes “’th member \\(U\\).” function \\(f: C \\B\\) may identified set \\(\\{(c, f(c))\\,:\\,c\\C\\}\\). Thus, target set \\(B\\) intrinsic part function \\(f\\). , defining image set \\(f\\)  \\[     \\operatorname{Im}f = \\{b\\,: \\text{exists $c\\C$ } (c, b) \\f\\}, \\]  can least say \\(\\operatorname{Im}f\\subseteq B\\). Given function \\(f: C \\B\\) subset \\(C_0\\subseteq C\\), can define \\(f|C_0\\), restriction \\(f\\) \\(C_0\\),  \\[     f|C_0 := \\{(c, b) \\f\\,:\\,c\\C_0\\} \\]  shall particularly interested restrictions functions specifying points Euclidean space. Suppose \\(\\mathbf{x}\\\\mathbf{R}^n\\), let \\(W\\) arbitrary subset \\(n=\\{0,1,2,\\dots,n-1\\}\\). \\(\\mathbf{x}|W\\) member \\(\\mathbf{R}^W\\), set functions assign real number member \\(W\\). regard \\(R^W\\) subspace \\(R^n\\). Moreover, \\(W\\) \\(k\\) members, \\(R^W\\) isomorphic , necessarily equal , Euclidean space \\(R^k\\). (\\(R^W\\) \\(R^k\\) equal iff \\(W=k\\) (, iff \\(W = \\{0, 1, \\dots, k-1\\})\\).) define projection mapping \\(\\pi^{n\\W}: R^n\\R^W\\) rule  \\[     v \\mapsto v|W. \\] generally, given two finite sets \\(W\\subseteq U\\) (necessarily sets integers), may define projection mapping \\(\\pi^{U\\W}: R^U\\R^W\\) rule  \\[    v \\R^U \\mapsto v|W. \\] Just can restrict domain function, can expand well. Suppose two functions \\(f\\\\mathbf{R}^X\\) \\(g\\\\mathbf{R}^Y\\), either \\(X\\) \\(Y\\) disjoint, \\(f(z) = g(z)\\) \\(z\\X\\cap Y\\). define union \\(f\\cup g\\) \\(f\\) \\(g\\) rule  \\[     (f\\cup g)(z) = \\begin{cases}            f(z) & \\text{$z\\X$,} \\\\            g(z) & \\text{$z\\Y\\smallsetminus X$.}        \\end{cases} \\]  Note exactly function get regarding functions sets ordered pairs taking literal union \\(f\\) \\(g\\). Also, clearly,  \\[\\begin{align*}     f &= (f\\cup g)|X \\\\     \\intertext{}     g &= (f\\cup g)|Y. \\end{align*}\\] Lastly, given two sets \\(\\) \\(B\\), define Cartesian product \\(\\) \\(B\\) set ordered couples: \\[     \\times B = \\{(, b): \\\\text{ } b\\B\\} \\]  \\(=\\mathbf{R}^X\\) \\(B=\\mathbf{R}^U\\) \\(X\\cap U=\\emptyset\\), natural isomorphism \\(\\mathbf{R}^X\\times\\mathbf{R}^U\\) \\(\\mathbf{R}^{X\\cup U}\\) given  \\[     (\\mathbf{x}, \\mathbf{u}) \\mapsto \\mathbf{x}\\cup\\mathbf{u}. \\] (inverse mapping given \\(\\mathbf{v} \\mapsto (\\mathbf{v}|X, \\mathbf{v}|U)\\) \\(\\mathbf{v}\\\\mathbf{R}^{X\\cup U}\\).)  convenient warranted, consider \\(\\mathbf{R}^X\\times\\mathbf{R}^U\\) \\(\\mathbf{R}^{X\\cup U}\\) identical. notion Cartisean product can extended three sets. example, since natural isomophism \\((\\times B)\\times C\\) \\(\\times(B\\times C)\\), can just write product \\(\\times B\\times C\\) write members ordered triplets \\((,b,c)\\) (instead \\(((,b),c)\\) \\((,(b,c)\\)).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-khalil-model","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Khalil model","title":"BioCro as a Dynamical System","text":"first model consider described Khalil (Khalil 2002). model expressive flexible, believe intuitively natural way view sort systems BioCro deals systems level. opening chapter, author introduces dynamical systems finite collection coupled first-order ordinary differential equations \\[\\begin{align*}   \\dot{x}_0 &= f_0(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}) \\\\   \\dot{x}_1 &= f_1(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}) \\\\   &\\; \\vdots \\\\   \\dot{x}_{n-1} &= f_{n-1}(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}). \\end{align*}\\] somewhat general system considered section \\(\\ref{opening_example}\\) derivatives depend upon state variables \\(x_0, x_1, \\dots, x_{n-1}\\), also upon time \\(t\\) Khalil refers input variables \\(u_0, u_1, \\dots, u_{p-1}\\). Defining  \\[\\begin{equation}   \\mathbf{x} = \\begin{bmatrix}                      x_0 \\\\                      x_1 \\\\                      \\vdots \\\\                      \\vdots \\\\                      x_{n-1}                \\end{bmatrix},\\quad   \\mathbf{u} = \\begin{bmatrix}                      u_0 \\\\                      u_1 \\\\                      \\vdots \\\\                      \\vdots \\\\                      u_{p-1}                \\end{bmatrix},\\quad   \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}) = \\begin{bmatrix}                      f_0(t, \\mathbf{x}, \\mathbf{u}) \\\\                      f_1(t, \\mathbf{x}, \\mathbf{u}) \\\\                      \\vdots \\\\                      \\vdots \\\\                      f_{n-1}(t, \\mathbf{x}, \\mathbf{u})                \\end{bmatrix}, \\label{eq:khalil_vectors} \\end{equation}\\]  state equation may written succinctly vector equation  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}). \\label{eq:Khalil_state_equation} \\end{equation}\\]  (Note Khalil actually uses 1-based indexing vector coordinates exposition, vector \\(\\mathbf{x}\\), example, defined  \\[   \\mathbf{x} = \\begin{bmatrix}                      x_1 \\\\                      x_2 \\\\                      \\vdots \\\\                      \\vdots \\\\                      x_n                \\end{bmatrix}. \\]  use 0-based indexing instead order consistent parts article.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-notion-of-state-in-the-khalil-and-biocro-models","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations > The Khalil model","what":"The notion of state in the Khalil and BioCro models","title":"BioCro as a Dynamical System","text":"Khalil remarks state variables “represent memory dynamical systems past.” Laplace (Dale 1995) remarks, “consider present state universe effect previous state cause follow.” inputs model, hand, general completely arbitrary. determined state past future values. help determine, determined , evolution state system. sense, like hand experimenter-god touching influencing otherwise mechanistically-determined system. BioCro, inputs referred drivers. also remarked terminology used discuss BioCro, terminology software , driver variables considered part state. partly expedience: certain contexts, convenient treat quantities vary time (sometimes even don’t) uniformly. convenience aside, also philosophical justification : many systems, inputs may clearly thought somehow external system. studying electrical circuit, example, experimenter may apply electrical inputs system see system responds. Even controlled plant-growth experiment conducted climate-controlled greenhouse, environmental inputs may applied somewhat arbitrarily. BioCro, contrast, inputs (drivers) usually related weather aspects environment—temperature, humidity, radiation, . Unlike controlled experiment, environmental variables evolve according laws; control experimenter. truly comprehensive model, laws evolution included right alongside laws determining plant growth. generally, overly complicate model, large, given inherently chaotic nature meteorological processes vast amounts additional data required, isn’t even feasible . BioCro, regard part system—part state system—part taken given rather part derived general rules governing evolution natural systems. None say, course, BioCro can’t also used model controlled experiments, carried green house; model “thought experiments” “” scenarios: happen used weather data 2005 assumed much higher \\(\\text{CO}_\\text{2}\\) concentration?","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"variants-of-khalils-model","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations > The Khalil model","what":"Variants of Khalil’s model","title":"BioCro as a Dynamical System","text":"point, worth bringing two restricted versions Khalil model. first equation \\(\\eqref{eq:Khalil_state_equation}\\) can written  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}). \\label{eq:unforced_state_equation} \\end{equation}\\]  Khalil refers unforced state equation: lacks explicit mention inputs. , points , input can specified explicit function time,  \\[\\begin{align}   \\mathbf{u} &= \\boldsymbol\\gamma(t), \\\\   \\intertext{explicit function state,}   \\mathbf{u} &= \\boldsymbol\\gamma(\\mathbf{x}), \\\\   \\intertext{explicit function ,}   \\mathbf{u} &= \\boldsymbol\\gamma(t, \\mathbf{x}), \\end{align}\\]  equation form \\(\\eqref{eq:Khalil_state_equation}\\) can always reduced equation form \\(\\eqref{eq:unforced_state_equation}\\). Khalil goes mention one particular special case class systems described equation \\(\\eqref{eq:unforced_state_equation}\\): namely, autonomous time-invariant. system autonomous function \\(f\\) depend explicitly \\(t\\), ,  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{x}). \\label{eq:autonomous_state_equation} \\end{equation}\\]  behavior autonomous system invariant shifts time origin. (falling body system considered autonomous: doesn’t matter precisely object released, subsequent motion follow pattern.) exception certain “toy” examples, based upon harmonic oscillator module, systems BioCro deals , conceptual level, almost invariably non-autonomous time-varying. largely due time-dependence drivers: matters whether start plants growing March May. (Formally, however, shall see, non-autonomous system can made automous one introducing time-related variable state.) discuss Khalil model discuss systems model used BioCro.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-giunti-mazzola-model","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Giunti-Mazzola model","title":"BioCro as a Dynamical System","text":"model due Giunti Mazzola generalization autonomous version Khalil model, though cast somewhat different form. autonomous, respects restrictive general model given \\(\\eqref{eq:Khalil_state_equation}\\); respects considerably general. highlight model two reasons: First, mentioned supplementary materials Lochocki et al. (2022). Second, generalizes concept time used dynamical system real numbers (Khalil model assumes) monoid. particular, may consider time domains consisting non-negative integers, fixed multiple , non-negative even integers. one natural ways view time BioCro systems: idealized view BioCro-modeled systems, time continuous, practical level, compute behavior systems discrete jumps. quote Giunti Mazzola’s definition dynamical system verbatim ( Giunti Mazzola (2012)): \\(DS_L\\) dynamical system \\(L\\) iff \\(DS_L\\) pair \\((M,(g^t)_{t \\T})\\) \\(L\\) pair \\((T, +)\\) \\(L = (T, +)\\) monoid. \\(t \\T\\) called duration system, \\(T\\) called time set, \\(L\\) time model; \\(M\\) non-empty set. \\(x \\M\\) called state system, \\(M\\) called state space; \\((g^t)_{t \\T}\\) family indexed \\(T\\) functions \\(M\\) \\(M\\). \\(t\\T\\), function \\(g^t\\) called state transition duration \\(t\\) (briefly, \\(t\\)-transition, \\(t\\)-advance) system; \\(v,t\\T\\), \\(x\\M\\), \\(g^0(x) = x\\), \\(0\\) unity \\(L\\); \\(g^{v+t}(x) = g^v(g^t(x))\\). Notice can time model now monoid, state space can now non-empty set: longer required subset Euclidean space. needn’t even continuum! fortiori, longer requirement state transitions differential equation based. (BioCro, however, use made generalization: BioCro, state space always subset (fact, connected subset) Euclidean space, state transitions (using state Khalil’s sense) always differential equation based.) Instead differential equations, condition (iv.b), sometimes called semi-group property, relates structure time model class state transitions. Just \\(T\\) monoid operation \\(+\\) additive identity \\(0\\), collection \\((g^t)_{t \\T}\\) state transitions, monoid operation function composition identity element identity function. Condition (iv) asserts mapping \\((T, +)\\) \\(((g^t)_{t \\T}, \\circ)\\) whereby \\(t \\mapsto g^t\\) monoid homomorphism. Condition (iv) fact crux definition dynamical system. Without , structure way system evolves: system may pass one state next willy-nilly without constraint relationship states time. Giunti Mazzola’s model definition cited supplementary materials Lochocki et al. (2022) justification considering quantities involved system (except time) part state. Whatever merits argument, retrospect, possibly amounts sort cherry-picking Giunti-Mazzola definition altogether clear whether BioCro dynamical systems, envisioned paper, , general, collection well-defined transition functions \\((g^t)_{t \\T}\\). Whether turns question interpret stipulation, given supplement, “term state used refer quantities involved system, except time.” elaborate question follows.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-barreira-valls-model","dir":"Articles","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Barreira-Valls model","title":"BioCro as a Dynamical System","text":"briefly mention one model discrete time case, mainly formulation epitome simplicity. Definition 1.1 Barreira (2019) states simply map \\(f: \\mathbf{X}\\\\mathbf{X}\\) called dynamical system discrete time. definition goes define higher-order mappings: define recursively \\[     f^n = f\\circ f^{n-1} \\] \\(n\\\\mathbf{Z}^+\\), convention \\(f^0 = \\operatorname{id}\\). \\(f\\) invertible, also define \\(f^{-n} = (f^{-1})^n\\) \\(n\\\\mathbf{Z}^+\\). entirely homologous Giunti-Mazzola model case monoid chosen time model either \\(\\mathbf{Z}\\) \\(\\mathbf{N}\\). Note recursion equation \\(\\eqref{eq:falling_body_recursion}\\) derived applying Euler’s method falling body problem fits nicely model: take \\(\\mathbf{X}\\) Euclidean 2-space function \\(f\\) defined rule \\[     (x, y) \\mapsto (x + \\delta y, y - \\delta g). \\] (Barreira Valls go define “dynamical system continuous time” (Barreira 2019, Definition 1.7) precisely way Giunti Mazzola (case time model \\(\\mathbf{R}\\) \\(\\mathbf{R}_{\\geq 0}\\))—, family mappings indexed time satisfying semi-group property.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-biocro-model","dir":"Articles","previous_headings":"","what":"The BioCro model","title":"BioCro as a Dynamical System","text":"BioCro system determined specification five entities: set initial values set (constant) parameter values set drivers set direct modules set differential modules five entities tell us everything dynamics system need order “solve” . (, precisely, solved determined specifying solver.)2 Aside differences concept state, Khalil model fits well idealized version BioCro model time considered continuous. see Section \\(\\ref{sec:BioCro_systems}\\), discuss two models side--side. first, elaborate bit Khalil model.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"elaboration-on-the-khalil-model","dir":"Articles","previous_headings":"The BioCro model","what":"Elaboration on the Khalil model","title":"BioCro as a Dynamical System","text":"Recall Khalil model expresses derivative \\(d\\mathbf{x}/dt\\) state function time \\(t\\), state \\(\\mathbf{x}\\), input \\(\\mathbf{u}\\):  \\[   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}). \\] Let us denote domains \\(\\mathbf{x}\\) \\(\\mathbf{u}\\) (vis-à-vis function \\(\\mathbf{f}\\)) \\(\\mathbf{X}\\) \\(\\mathbf{U}\\). \\(\\mathbf{X}\\) \\(\\mathbf{U}\\) vector spaces reals, following conventions set Section \\(\\ref{sec:notation}\\), may view sets mappings finite index sets reals. Thus  \\[\\begin{align}     \\mathbf{X} = \\mathbf{R}^X \\\\     \\intertext{}     \\mathbf{U} = \\mathbf{R}^U \\end{align}\\]  finite sets \\(X\\) \\(U\\), assume \\(X\\) \\(U\\) disjoint.3 Furthermore, recall Khalil model, value \\(\\mathbf{u}\\) may given function time /state:  \\[\\begin{align*}   \\mathbf{u} &= \\boldsymbol\\gamma(t), \\\\   \\mathbf{u} &= \\boldsymbol\\gamma(\\mathbf{x}), \\\\   \\intertext{}   \\mathbf{u} &= \\boldsymbol\\gamma(t, \\mathbf{x}). \\end{align*}\\]  terms individual components \\(\\mathbf{u}\\), component \\(u_i\\) \\(\\mathbf{u}\\) can expressed function \\(\\gamma_i\\) \\(t\\) \\(\\mathbf{x}\\) :  \\[\\begin{align*}   u_i &= \\gamma_i(t), \\\\   u_i &= \\gamma_i(\\mathbf{x}), \\\\   \\intertext{}   u_i &= \\gamma_i(t, \\mathbf{x}). \\end{align*}\\]  also possible \\(u_i\\) doesn’t actually depend either time state, fact constant:  \\[\\begin{equation}   u_i = k \\quad \\text{$k\\\\mathbf{R}$}. \\end{equation}\\]  can, fact, partition variables \\(u_0, u_1, \\dots, u_{p-1}\\) comprising varying input \\(\\mathbf{u}\\) three groups: Let \\(u_i\\) group \\(K\\) value \\(u_i\\) depends neither \\(t\\) \\(\\mathbf{x}\\); , always value, matter state time. Let \\(u_i\\) group \\(D\\) value \\(u_i\\) depends \\(t\\) alone. Let \\(u_i\\) group \\(W\\) otherwise, value \\(u_i\\) depends value \\(\\mathbf{x}\\) (possibly also \\(t\\)). Thus \\(U=K\\cup D\\cup W\\), allowing us partition vector space \\(\\mathbf{U}\\) corresponding sub-vector spaces \\(\\mathbf{K}\\), \\(\\mathbf{D}\\), \\(\\mathbf{W}\\); ,  \\[   \\mathbf{U} = \\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}, \\]  \\(\\mathbf{K}=\\mathbf{R}^K\\), \\(\\mathbf{D}=\\mathbf{R}^D\\), \\(\\mathbf{W} = \\mathbf{R}^W\\). input \\(\\mathbf{u}\\) may now written triplet \\((\\mathbf{k}, \\mathbf{d}, \\mathbf{w})\\) \\(\\mathbf{k}\\\\mathbf{K}\\), \\(\\mathbf{d}\\\\mathbf{D}\\), \\(\\mathbf{w}\\\\mathbf{W}\\).4 Moreover, exist functions \\(\\gamma^\\mathbf{D}: T\\\\mathbf{D}\\) \\(\\gamma^\\mathbf{W}: T\\times\\mathbf{X}\\\\mathbf{W}\\) constant function \\(\\gamma^\\mathbf{K}\\) codomain \\(\\mathbf{K}\\)  \\[\\begin{align}   \\mathbf{k} &= \\gamma^\\mathbf{K}(),       \\label{eq:k} \\\\   \\mathbf{d} &= \\gamma^\\mathbf{D}(t),      \\label{eq:d} \\\\   \\intertext{}   \\mathbf{w} &= \\gamma^\\mathbf{W}(t, \\mathbf{x}) \\label{eq:s} \\end{align}\\]  moment life system. Since \\(\\mathbf{u} = (\\mathbf{k}, \\mathbf{d}, \\mathbf{w})\\), can rewrite state equation \\(\\eqref{eq:Khalil_state_equation}\\)  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{k}, \\mathbf{d}, \\mathbf{w}). \\label{eq:BioCro_state_equation} \\end{equation}\\]  using equations \\(\\eqref{eq:k}\\), \\(\\eqref{eq:d}\\), \\(\\eqref{eq:s}\\), can eliminate \\(\\mathbf{k}\\), \\(\\mathbf{d}\\), \\(\\mathbf{w}\\) get \\(\\mathbf{f}\\) function \\(t\\) \\(\\mathbf{x}\\) alone:  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\gamma^\\mathbf{K}(), \\gamma^\\mathbf{D}(t), \\gamma^\\mathbf{W}(t, \\mathbf{x})). \\end{equation}\\]  words,  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}^{\\,*}(t, \\mathbf{x}) \\end{equation}\\]  suitable function \\(\\mathbf{f}^{\\,*}\\), now unforced state equation equation \\(\\eqref{eq:unforced_state_equation}\\).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"biocro-viewed-in-terms-of-the-khalil-model","dir":"Articles","previous_headings":"The BioCro model","what":"BioCro viewed in terms of the Khalil model","title":"BioCro as a Dynamical System","text":"BioCro, noted , system determined specify initial values, parameters, drivers, direct modules, differential modules. relate version Khalil model just discussed? initial values correspond state \\(\\mathbf{x}\\) initial time \\(t_0\\), convenience, always take 0. (Thus time always amount time elapsed since start simulation.) denote initial state \\(\\mathbf{x}_0 = (x_{0,0}, x_{1,0}, \\dots, x_{n-1,0})\\). BioCro, initial values specification determines (Khalil’s terminology) variables comprise state, dimension state space \\(\\mathbf{X}\\) equal number variables \\(\\mathbf{x}_0\\). now, shall consider initial values part definition system far determine set variables comprising state space system. specification values variables time \\(t_0\\) considered something associated particular run system something inherent system . make comparison Khalil Giunti models easier, since models don’t specify anything analogous initial state. follows, need make distinction, shall refer dynamical system together specified initial state run system. (Note documentation writing BioCro, quantities considered part state, variables whose values specified providing set initial values BioCro simulation referred differential variables. , referring things using terminology, refer \\(\\mathbf{X}\\) state space, differential component state space. BioCro, initial values parameter (, example, set differential modules) determines variables belong differential component.) parameters correspond sole value codomain constant function \\(\\gamma^\\mathbf{K}\\). \\(q\\)-tuple values \\(\\mathbf{k} = (k_0, k_1, \\dots, k_{q-1})\\), \\(q\\) number parameters, dimension vector subspace \\(\\mathbf{K}\\). drivers correspond function \\(\\gamma^\\mathbf{D}:T\\\\mathbf{R}^r\\), giving value \\(\\mathbf{d}\\) function time. Writing \\(\\mathbf{d}\\) \\((d_0, d_1, \\dots, d_{r-1})\\), \\(r\\) number driver variables (dimension \\(\\mathbf{D}\\)), can decompose \\(\\gamma^\\mathbf{D}(t)\\) scalar-valued functions \\(\\gamma^\\mathbf{D}_0(t)\\), \\(\\gamma^\\mathbf{D}_1(t)\\), , \\(\\gamma^\\mathbf{D}_{r-1}(t)\\). noted driver functions \\(\\gamma^\\mathbf{D}_i\\) rarely functions can easily specified computed formula. example shown Appendix 1 Lochocki et al. (2022), function giving value driver variable \\(Q\\) corresponding photosynthetic photon flux density based function  \\[\\begin{equation}   Q = \\sin(\\frac{t}{12\\cdot 3600} \\pi)\\cdot 2000 \\times 10^{-6}. \\end{equation}\\]  , \\(t\\) meant represent elapsed time seconds, example, actual values fed BioCro system constructor values \\(Q\\) set integral values \\(t\\), namely, \\(t = 0, 1, 2, \\dots, 43200\\). acknowledged appendix, highly artificial example. Usually, driver variable function can defined via equation5 form  \\[\\begin{equation}     \\gamma^\\mathbf{D}_i(t) = \\begin{cases}         0.046 & \\text{$t = t_0$}, \\\\         0.023 & \\text{$t = t_1$}, \\\\         \\dots \\\\         \\dots \\\\         1151.541 & \\text{$t = t_{4000}$}, \\\\         747.040 & \\text{$t = t_{4001}$}, \\\\         \\dots \\\\         \\dots \\\\         0.621 & \\text{$t = t_{8758}$}, \\\\         0.874 & \\text{$t = t_{8759}$}.     \\end{cases} \\end{equation}\\]  , \\(t_0, t_1, \\dots, t_{8759}\\) sequence times representing amount time elapsed since beginning simulation, \\(t_0 = 0\\), fixed positive value \\(\\Delta t\\), \\(t_{j+1} = t_j + \\Delta t\\) \\(0 \\leq j < 8759\\). practice, BioCro, equation usually specified implicitly via R data frame: \\(\\gamma^\\mathbf{D}_i\\) corresponds column data frame, value column row \\(j\\) value \\(\\gamma^\\mathbf{D}_i\\) time \\(t_{j-1}\\). (numerical methods, need know values \\(\\gamma^\\mathbf{D}_i(t)\\) values \\(t\\) time points given definition. can done adding additional case rule; namely,  \\[\\begin{equation}   \\gamma^\\mathbf{D}_i(t) = \\frac{t_{j + 1} - t}{\\Delta t}\\,\\gamma^\\mathbf{D}_i(t_j)                        + \\frac{t - t_j}{\\Delta t}\\,\\gamma^\\mathbf{D}_i(t_{j+1})                        \\quad\\text{$t_j < t < t_{j+1}$} \\end{equation}\\]  makes \\(\\gamma^\\mathbf{D}_i(t)\\) continuous piece-wise linear function.) Now modules. show , BioCro system equivalent BioCro system single module type, initial values, parameters, drivers.6 Thus, simplicity, consider case single module type.7 Later, section modularization, consider single module may broken multiple modules. direct module corresponds function \\(\\gamma^\\mathbf{W}: T\\times\\mathbf{X} \\\\mathbf{W}\\). point fact, usually think direct module corresponding function \\({}^*\\gamma^\\mathbf{W}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\\\mathbf{W}\\), using equations \\(\\eqref{eq:k}\\) \\(\\eqref{eq:d}\\) substituting, can derive function \\(\\gamma^\\mathbf{W}\\) gives value \\(\\mathbf{w}\\) function \\(t\\) \\(\\mathbf{x}\\) alone. Note particular number output variables direct module gives dimension \\(\\mathbf{W}\\) component \\(\\mathbf{U}\\). call variables direct quantities system (lack better term) since outputs direct module. Two observations made . First, general case, multiple direct modules \\(\\mathcal{M}_1, \\mathcal{M}_2, \\dots\\) used construction system, modules may depend outputs direct modules. case, module \\(\\mathcal{M}_i\\) corresponds function form  \\[\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i, \\end{equation}\\]  \\(\\mathbf{W}_i\\) subspace \\(\\mathbf{W}\\) generated variables output module \\(\\mathcal{M}_i\\) \\(\\mathbf{\\overline{W}}_i\\) subspace \\(\\mathbf{W}\\) generated inputs module \\(\\mathcal{M}_i\\) \\(X\\), \\(K\\), \\(D\\). (\\(\\mathbf{\\overline{W}}_i\\) complementary \\(\\mathbf{W}_i\\), \\(\\mathbf{W}_i \\times \\mathbf{\\overline{W}}_i\\) subspace \\(\\mathbf{W}\\).) discuss section modularization. Second, mentioned Khalil model allows inclusion output function  \\[\\begin{equation}   \\mathbf{y} = \\mathbf{h}(t, \\mathbf{x}, \\mathbf{u}). \\end{equation}\\]  Khalil says output vector \\(\\mathbf{y}\\) “comprises variables particular interest analysis dynamical systems .” Khalil model, variables, unlike variables comprise \\(\\mathbf{u}\\), part state equation. informational purposes . closest analogue variables BioCro variables outputs direct module system inputs differential module. (example variables BioCro library kinetic energy, spring energy, total energy outputs harmonic energy module (class harmonic_energy). exist give information system using module since (least writing) existing modules use inputs.) differential module corresponds function \\(\\mathbf{f}\\) equation \\(\\eqref{eq:BioCro_state_equation}\\). Khalil state equation, \\(\\mathbf{u}\\) divided components \\(\\mathbf{k}\\), \\(\\mathbf{d}\\), \\(\\mathbf{w}\\). primary constraint differential module output variables must (terminology Khalil) state variables (determined, may recall, variables included specification initial state). (BioCro doesn’t require state variables included differential module outputs: state variable \\(x_i\\) , assumed \\(\\dot{x}_i = 0\\); , component state remains constant throughout life system.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"biocros-concept-of-time","dir":"Articles","previous_headings":"The BioCro model","what":"BioCro’s concept of time","title":"BioCro as a Dynamical System","text":"C++ interface BioCro library, one required user-facing time-related variable—namely, quantity timestep, must provided one (possibly ) parameters setting system. (R interface, always three additional quantities—doy, hour, time—always come play set run system. artifacts certain aspects R interface subject revision, mostly ignore .) timestep quantity, however, gives rise implicit quantity, elapsed time, corresponds well time variable used Khalil Giuli-Mazzola models.8 timestep, fact, denotes amount time elapses successive values driver variables.9 Time often shows explicitly BioCro system form specific date time, value driver variable date time; example, information drivers parameter may able make assertions  “3 p.m. April 15, 2005” sort time Giunti model deals. Times—durations—Giunti model members monoid, can add together get another time monoid. can add   meaningful way get date-time. can, however, add durations: can, example, look state system one hour initial state system, look state two hours later, second observation three hours time corresponding system’s initial state (since \\(2 + 1 = 3\\)). hinted , timestep quantity generates monoid: value timestep \\(\\delta\\), members monoid \\(0, \\delta, \\delta + \\delta, \\delta + \\delta + \\delta, \\delta + \\delta + \\delta + \\delta, \\dots\\), ad infinitum. course, BioCro, don’t let system simulations run forever, set times dealt given run system doesn’t really quite form monoid add \\(\\delta\\) final time point simulation, get time outside domain simulation. Conceptually, can deal problem (reconciling BioCro’s concept time Giunti model) imagining system simulations run forever let (knowledge infinitely far future driver variables happened using); imagine instead, choose look behavior system finite period time.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"biocros-concept-of-state","dir":"Articles","previous_headings":"The BioCro model","what":"BioCro’s concept of state","title":"BioCro as a Dynamical System","text":"BioCro, level module, input quantities considered uniformly. good reasons , reasons go beyond mere programmatic convenience. example, input module might one system determined mechanistically output module; different system, might come data observations thereby one drivers. module using input doesn’t care comes . set system, however, quantity falls neatly one four categories: either constant; driver; differential quantity; derived quantity, , quantity whose value given time can directly computed values quantities time using less simple formula. (correspond, respectively, subspaces \\(\\mathbf{K}\\), \\(\\mathbf{D}\\), \\(\\mathbf{X}\\), \\(\\mathbf{W}\\) discussed Sections \\(\\ref{sec:khalil_elaboration}\\) \\(\\ref{sec:BioCro_systems}\\) arguments \\(\\mathbf{k}\\), \\(\\mathbf{d}\\), \\(\\mathbf{x}\\), \\(\\mathbf{w}\\) state equation form given equation \\(\\eqref{eq:BioCro_state_equation}\\).) uniform treatment quantities module level reflected C++ code used implement BioCro simulations: quantity used given system incorporated C++ structure user-defined type called state_map, maps names quantities value quantities particular time. naturally leads referring aggregate values quantities system particular point time state system time. section attempts reconcile conception state commonly used dynamical systems theory, particular, formulations presented section \\(\\ref{sec:formulations}\\).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"biocro-state-and-the-giunti-model","dir":"Articles","previous_headings":"The BioCro model > BioCro’s concept of state","what":"BioCro state and the Giunti model","title":"BioCro as a Dynamical System","text":"BioCro system drivers including time-like variable state , general, conform Giunti model. see , let us consider typical BioCro system driver component consists values number weather-related variables course year, suppose variables happen values two different times; example, suppose weather 1 p.m. April 12, 2008 exactly weather 3 p.m. May 16, 2008 extent weather captured attributes model. Moreover, suppose system might typical array differential variables—namely, describe state growth plant subjected environment described driver variables system. Consider now two identical states—one, \\(s_1\\), corresponding seedling planted 1 p.m. April 12, 2008, one, \\(s_2\\), corresponding identical seedling planted 3 p.m. May 16, 2008. states identical attributes seedlings, described differential variables, identical, attributes weather, described driver variables, also identical; parameters (constant) identical, values “direct” variables, functions three components, also identical. (Recall specifically excluding date time notion state .) words, \\(s_1 = s_2\\). Now consider one transition functions \\(g^t\\)—say, example, function \\(g^u\\), \\(u\\) corresponds duration 30 days. \\(g^u(s_1)\\) state corresponding attributes seedling planted April 12 environment one month later, May 12, 2008. \\(g^u(s_2)\\) state corresponding attributes seedling planted May 16 environment approximately one month later, June 15. weather 1 p.m. May 12, 2008 identical 3 p.m. June 15, 2008? According Giunti model, , since \\(s_1 = s_2\\) implies state \\(g^u(s_1)\\) equals state \\(g^u(s_2)\\); two states equal, components state describe weather equal well. know something wrong , even weather occurs two different times, can’t expect weather patterns going forward develop way. Moreover, likelyhood identical seedlings planted April 12 May 16 longer identical 30 days later likely subjected different weather conditions. two ways (least) predicament. One ensure driver component state never repeats . monotonically-increasing driver variable trick, natural way ensuring repetitions probably include representation time, calendar date time, Julian date, reduced Julian date, Unix time part driver component state. (R interface BioCro fact requires either day--year hour day driver variables requires monotonically-increasing variable called time. C++ interface, however, requires neither .) second way, one makes system formally time-independent, modify driver component notion state. scheme, driver component state just array values driver variables happen particular time. Now, instead, encapsulation future driver variable values indefinitely far future. One way imagine , thinking drivers corresponding weather, think driver component state particular time weather prediction giving weather time every future time, .e., weather one day now, two days now, ; moreover, just prediction, 100% accurate one. state now, without include date time, encapsulates information need order know state \\(x\\) amount time future. bring show even presence drivers (inputs, Khalil’s terminology), notion autonomous system possible. can systems conform Giunti model without requiring states different dates distinct. example, imagine greenhouse experiment climate conditions greenhouse repeat exactly pattern one day next. system, driver state noon—“weather” prediction moment going forward (one hour later, 10 hours later, 10 days later)—exactly one day next. evolution generic seedling: evolution seedling planted noon one day evolution identical seedling planted noon twenty days later. practical terms, however, rather complicated model. state space longer Euclidean space, since \\(\\mathbf{D}\\), driver component state space, longer Euclidean space \\(\\mathbf{R}^r\\) instead set \\((\\mathbf{R}^r)^T\\) functions \\(\\gamma^\\mathbf{D}: T \\\\mathbf{R}^r\\). (Note state transition duration \\(u\\) restricted \\(\\mathbf{D}\\) component state least easily defined: \\(\\gamma\\) \\(\\mathbf{D}\\) component state \\(\\mathbf{s}\\), \\(g^u(\\gamma)\\) function defined rule \\(t \\mapsto \\gamma(u + t)\\).) upshot want keep Giunti model model BioCro systems, best plan allow time proxy time component variable state.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-state-space-as-a-manifold","dir":"Articles","previous_headings":"The BioCro model > BioCro’s concept of state","what":"The state space as a manifold","title":"BioCro as a Dynamical System","text":"One arguments given supplementary materials Lochocki et al. (2022) considering variables state variables “division state auxiliary variables arbitrary.” Whether compelling argument considering “quantities equal”, statement , least formal level, largely true, least case variables mutually determine one another. stated conclusion Appendix II Mesarović Takahara (1975), starting point modeling observations assumption existence relationships . primary concept system definable just much data. Whether relationship can described transition state space point needs proven. Even possible, state space unique, indicates secondary nature concept state [emphasis mine]. (, authors presumably using state less comprehensive sense, distinguished system inputs outputs, though conceivably simply mean attributes choose observe codify notion state unique; sake argument, ’ll assume mean least former. authors, fact, hint altogether different view meant state system. view, everything can observed system encompassed system’s inputs outputs: system essentially black box, responds given inputs particular time always . unobservable aspects system come play. unobservables constitute state system, responds given time given inputs depends state happens . helpful analogy might notion person’s state mind determinant might react particular event.) However expansive choose make notion state, one thing clear: choose regard parameters, drivers, relationship quantities embodied direct modules constraints state space systems, given state lies state space, can fully specify state using values -called differential variables (plus time); values quantities can determined . Thus, total number quantites system (including time) \\(n\\), number differential variables \\(k\\), state space may viewed \\(k+1\\)-dimensional manifold embedded Euclidean \\(n\\)-space \\(\\mathbf{R}^n\\). Put another way, matter many variables use describe state system, still \\(k+1\\) degrees freedom: parameters can take one value, time variable determines values driver variables, values together values differential variables determine values remaining variables, direct variables. analogy may help make clearer: Say wish consider points earth. don’t limit points surface, specify points three coordinates—longitude, latitude, altitude. Large values altitude correspond points earth’s surface, negative values usually correspond points earth’s interior. considering arbitrary points three-dimensional space, makes sense need three coordinates fully specify point. suppose now say want consider points earth’s surface. Given constraint, understanding going try describe points surface earth, can get two coordinates: need specify longitude latitude. include third number, altitude, well (provided know ), now necessary, understood point lies earth’s surface. consider system whose state comprises location given object surface earth, state space surface, two-dimensional space embedded Euclidean 3-space. Note example, matters two coordinates choose describing states. Generally, , example, suffice know altitude longitude, since, given choice altitude longitude, may many points various latitudes match. (exceptional cases, course: specify altitude 8848.86 (meters), even without specified longitude latitude (let alone ), know object top Mount Everest.10)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"modularization-in-biocro","dir":"Articles","previous_headings":"The BioCro model","what":"Modularization in BioCro","title":"BioCro as a Dynamical System","text":"mentioned Section \\(\\ref{sec:BioCro_systems}\\), BioCro system can replaced equivalent system using single module type. merely write one direct module one differential module, (respectively) combines effects individual direct differential modules used original system. use “merely” advisedly , one main strengths BioCro ability modularize, wide repertoire modules choose , can choose combine whatever way useful, without write new module time want tweak aspect system whole. section, look combining modules formal level, delineating requirements using two modules place one effects . start differential module case since simpler two.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"modularization-of-the-derivative-function","dir":"Articles","previous_headings":"The BioCro model > Modularization in BioCro","what":"Modularization of the derivative function","title":"BioCro as a Dynamical System","text":"mentioned Section \\(\\ref{sec:BioCro_systems}\\), BioCro system uses single differential module, module corresponds function \\(\\mathbf{f}\\) Khalil state equation \\(\\eqref{eq:BioCro_state_equation}\\). shall henceforth refer \\(\\mathbf{f}\\) derivative function system. turns , BioCro, derivative function never depends \\(t\\) directly; temporal dependence function \\(\\mathbf{f}\\), always via driver variable differential variable. Therefore, can rewrite equation \\(\\eqref{eq:BioCro_state_equation}\\)  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{x}, \\mathbf{k}, \\mathbf{d}, \\mathbf{w}). \\end{equation}\\]  Thus, \\(\\mathbf{f}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}\\\\mathbf{X}\\). , shall adopt BioCro’s notion state space denote \\(\\mathbf{S}\\),  \\[     \\mathbf{S} = \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}. \\]  \\(\\mathbf{f}\\) function \\(\\mathbf{f}: \\mathbf{S} \\\\mathbf{X}\\), state equation, shall now refer derivative equation, just  \\[\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{s}), \\end{equation}\\]  \\(\\mathbf{s}\\) denotes state state space \\(\\mathbf{S}\\). general, can write state \\(\\mathbf{s}\\) terms coordinate variables describing component spaces; ,  \\[     \\mathbf{s} = (x_0, x_1, \\dots, x_{n-1}, k_0, k_1, \\dots,                k_{q-1}, d_0, d_1, \\dots, d_{r-1}, w_0, w_1, \\dots, w_{s-1}) \\]  \\(n\\), \\(q\\), \\(r\\), \\(s\\) dimensions component spaces \\(\\mathbf{X}\\), \\(\\mathbf{K}\\), \\(\\mathbf{D}\\), \\(\\mathbf{W}\\), respectively. talk decomposing derivative function system, first describe mean valid differential module BioCro system. Let \\(X = \\{x_0, x_1, \\dots, x_{n-1}\\}\\) set differential variables system, let  \\[     S = \\{x_0, x_1, \\dots, x_{n-1}, k_0, k_1, \\dots, k_{q-1},           d_0, d_1, \\dots, d_{r-1}, w_0, w_1, \\dots, w_{s-1}\\} \\]  set coordinate variables needed specify state state space system. \\(\\mathcal{M}\\) valid differential module system input variables contained \\(S\\) output variables contained \\(X\\). Let \\(\\mathbf{M}_\\text{}\\) vector subspace \\(\\mathbf{S}\\) generated input variables \\(\\mathcal{M}\\) let \\(\\mathbf{M}_\\text{}\\) vector subspace \\(\\mathbf{X}\\) generated output variables \\(\\mathcal{M}\\). derivative function \\(\\mathcal{M}\\) function  \\[     \\hat{\\mathbf{f}}_\\mathbf{M}: \\mathbf{M}_\\text{} \\\\mathbf{M}_\\text{}. \\]  function, may associate unique function \\(\\mathbf{f}_\\mathbf{M}: \\mathbf{S} \\\\mathbf{X}\\) follows: Let \\(\\pmb{\\pi}\\) projection \\(\\mathbf{S}\\) onto \\(\\mathbf{M}_\\text{}\\), let \\(\\pmb{\\iota}\\) injective function \\(\\mathbf{M}_\\text{}\\) \\(\\mathbf{X}\\) assigns coordinate \\(X\\) output variable \\(\\mathcal{M}\\) value zero. define  \\[     \\mathbf{f}_\\mathbf{M} = \\pmb{\\iota} \\circ \\hat{\\mathbf{f}}_\\mathbf{M} \\circ \\pmb{\\pi}:         \\mathbf{S} \\stackrel{\\pmb{\\pi}}{\\} \\mathbf{M}_\\text{}                \\stackrel{\\hat{\\mathbf{f}}_\\mathbf{M}}{\\longrightarrow} \\mathbf{M}_\\text{}                \\stackrel{\\pmb{\\iota}}{\\} \\mathbf{X}. \\]  shall call function \\(\\mathbf{f}_\\mathbf{M}\\) system-complete derivative function \\(\\mathcal{M}\\). Now suppose collection \\(\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\}\\) differential modules assumed consistent (rest ) system, let \\(\\{\\mathbf{f}_\\mathbf{M_1}, \\mathbf{f}_\\mathbf{M_1}, \\dots, \\mathbf{f}_\\mathbf{M_m}\\}\\) corresponding system-complete derivative functions. combined derivative function \\(\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\}\\) function  \\[     \\mathbf{f} = \\sum_{\\\\{1, 2, \\dots, m\\}} \\mathbf{f}_\\mathbf{M_i}, \\]  defined rule \\[     \\mathbf{s} \\mapsto \\sum_{\\\\{1, 2, \\dots, m\\}} \\mathbf{f}_\\mathbf{M_i}(\\mathbf{s}). \\]  \\(\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\}\\) comprise differential modules system, \\(\\mathbf{f}\\) system’s derivative function. always write single differential module \\(\\mathcal{M}\\) \\(\\mathbf{f}\\) system-complete derivative function use place collection modules \\(\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\}\\) system uses . module likely combine several mechanistic bio-systems concepts, one strengths BioCro ability tweak one mechanistic model without rewrite multiple modules might use .","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"decomposing-the-direct-module-function","dir":"Articles","previous_headings":"The BioCro model > Modularization in BioCro","what":"Decomposing the direct module function","title":"BioCro as a Dynamical System","text":"Let \\(\\mathcal{S}\\) BioCro system, let \\(\\mathbf{S} = \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\times \\mathbf{W}\\) state space \\(\\mathcal{S}\\). mentioned Section \\(\\ref{sec:BioCro_systems}\\), direct module component BioCro system \\(\\mathcal{S}\\) corresponds function  \\[\\begin{equation}     \\gamma^\\mathbf{W}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\\\mathbf{W} \\label{eq:dir_mod_component_fn} \\end{equation}\\]  determines value “direct variable” component state value components. convenience follows, shall write \\(\\mathbf{H}\\) abbreviate cross product \\(\\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\). Thus may write \\(\\eqref{eq:dir_mod_component_fn}\\)  \\[     \\gamma^\\mathbf{W}: \\mathbf{H} \\\\mathbf{W}. \\] general, however, direct module component system subdivided two submodules, , also mentioned Section \\(\\ref{sec:BioCro_systems}\\), system one direct module, constituent module \\(\\mathcal{M}_i\\) corresponds function  \\[\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i, \\end{equation}\\]  , using abbreviation used ,  \\[\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{H}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i. \\label{eq:dir_mod_fn} \\end{equation}\\] Letting \\(H\\) denote set variables corresponding \\(\\mathbf{H}\\) denoting input output variables module \\(\\mathcal{M}_i\\) \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\) \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\) respectively, can write  \\[\\begin{align*}     \\mathbf{W}_i &= \\mathbf{R}^{\\operatorname{\\mathbf{}}\\mathcal{M}_i} \\\\     \\intertext{}     \\mathbf{\\overline{W}}_i &= \\mathbf{R}^{\\operatorname{\\mathbf{}}\\mathcal{M}_i\\smallsetminus H}, \\end{align*}\\]  \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\) \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\) disjoint, since direct modules never share inputs outputs. Note may case \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\subseteq H\\); case \\(\\mathbf{\\overline{W}}_i\\) 0-dimensional \\(\\ref{eq:dir_mod_fn}\\) reduces  \\[     \\gamma^{\\mathbf{W}_i}: \\mathbf{H} \\\\mathbf{W}_i. \\] \\(H\\) corresponds union differential variables, parameters, driver variables system. Usually, case given direct module system use variables \\(H\\): variables \\(H\\) affect value output, even listed list returned module’s get_inputs() function. always potentially available use direct module, follows, convenient assume direct module inputs include variables \\(H\\); , \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\supseteq H\\), direct modules \\(\\mathcal{M}_i\\). way, thing changes domain module function various direct modules \\(\\mathbf{\\overline{W}}_i\\) component \\(\\mathbf{H}\\times\\mathbf{\\overline{W}}_i\\). simplify exposition follows. (take simple example formal dependence versus actual dependence, consider two-variable function \\(f(x,y)\\) defined rule \\((x,y)\\mapsto x^2\\). Formally, function two variables \\(x\\) \\(y\\). value function never actually depends value \\(y\\).)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"the-ordered-sum-of-two-direct-modules","dir":"Articles","previous_headings":"The BioCro model > Modularization in BioCro > Decomposing the direct module function","what":"The ordered sum of two direct modules","title":"BioCro as a Dynamical System","text":"Suppose \\(\\mathcal{M}_i\\) \\(\\mathcal{M}_j\\) two direct modules disjoint sets output variables (, \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset\\)), suppose also none outputs \\(\\mathcal{M}_j\\) inputs \\(\\mathcal{M}_i\\); , \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset\\). Let \\(f\\) \\(g\\) corresponding functions. convenience, put  \\[\\begin{align*}     &=\\operatorname{\\mathbf{}}\\mathcal{M}_i \\\\     B &=\\operatorname{\\mathbf{}}\\mathcal{M}_i \\\\     C &=\\operatorname{\\mathbf{}}\\mathcal{M}_j \\\\     \\intertext{}     D &=\\operatorname{\\mathbf{}}\\mathcal{M}_j, \\end{align*}\\]   \\[\\begin{align*}     f&: \\mathbf{R}^\\\\mathbf{R}^B \\\\     \\intertext{}     g&: \\mathbf{R}^C \\\\mathbf{R}^D, \\end{align*}\\]  \\(\\cap B=C\\cap D=\\cap D=B\\cap D=\\emptyset\\). define \\(\\mathcal{M}_i + \\mathcal{M}_j\\), ordered sum \\(\\mathcal{M}_i\\) \\(\\mathcal{M}_j\\), direct module whose corresponding function  \\[\\begin{equation}     f\\ast g: \\mathbf{R}^{ \\cup (C\\smallsetminus B)}\\\\mathbf{R}^{ B\\cup D} \\label{eq:ordered_sum_function} \\end{equation}\\]  defined  \\[\\begin{equation}     f\\ast g = (f\\circ\\pi^{ \\cup (C\\smallsetminus B)\\})               \\cup               (g\\circ(                 \\pi^{ \\cup (C\\smallsetminus B)                      \\C\\smallsetminus B}                   \\cup                 (\\pi^{ B\\C\\cap B}\\circ                 f\\circ                 \\pi^{ \\cup (C\\smallsetminus B)\\}))). \\label{eq:ordered_sum} \\end{equation}\\]  (Note \\(B\\cap C=\\emptyset\\), \\(C\\smallsetminus B=C\\), \\(\\ref{eq:ordered_sum}\\) reduces  \\[\\begin{equation}     f\\ast g = (f\\circ\\pi^{ \\cup C\\})               \\cup               (g\\circ(\\pi^{ \\cup C \\C})). \\end{equation}\\]  case, ordering immaterial, \\(\\mathcal{M}_j+\\mathcal{M}_i=\\mathcal{M}_i+\\mathcal{M}_j\\), \\(g\\ast f=f\\ast g\\).) Recalling inputs outputs direct module function must disjoint, can check indeed case sum. First note whenever can take ordered sum two modules \\(\\mathcal{M}_i\\) \\(\\mathcal{M}_j\\),  \\[\\begin{align}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &= \\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\label{eq:input_of_sum} \\\\     \\intertext{}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &= \\operatorname{\\mathbf{}}\\mathcal{M}_i\\cup\\operatorname{\\mathbf{}}\\mathcal{M}_j. \\label{eq:output_of_sum} \\end{align}\\]  (fact set inputs ordered sum \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i)\\) readily apparent \\(\\ref{eq:ordered_sum_function}\\) \\(\\ref{eq:ordered_sum}\\): domain \\(f\\ast g\\) \\(\\mathbf{R}^{ \\cup (C\\smallsetminus B)}\\) corresponds inputs corresponding module \\(\\cup (C\\smallsetminus B)\\), just \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i)\\). Similarly outputs.) Using ,  \\[\\begin{alignat*}{2}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) \\cap \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &=\\;&&         (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i)) \\cap         (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup \\operatorname{\\mathbf{}}\\mathcal{M}_j)             \\quad \\text{\\ref{eq:input_of_sum} \\ref{eq:output_of_sum}} \\\\         &= &&(\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\\\            &&&        \\cup               (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j) \\\\            &&&        \\cup               ((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\\\            &&&        \\cup               ((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j)                  \\qquad \\text{distributivity $\\cap$ $\\cup$} \\\\         &= &&\\emptyset \\cup \\emptyset \\cup \\emptyset \\cup \\emptyset \\\\         &= &&\\emptyset \\end{alignat*}\\]  intersections distributive expansion empty easily verified: \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i\\) \\((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j)\\) empty consequence direct modules non-overlapping inputs outputs. \\((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i\\) must empty since member \\(\\operatorname{\\mathbf{}}M_J\\) \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\) can’t also \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\). Finally, \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset\\) stipulation made defining ordered sum \\(\\mathcal{M}_i\\) \\(\\mathcal{M}_j\\). Equation \\(\\ref{eq:ordered_sum}\\) perhaps requires little explication order comprehended. Suppose given value \\(x\\) \\(\\mathbf{R}^{ \\cup (C\\smallsetminus B)}\\), domain \\(f\\ast g\\). can describe \\((f\\ast g)(x)\\\\mathbf{R}^{ B\\cup D}\\) describing way compute \\((f\\ast g)(x)\\) maps \\(y\\B\\cup D\\) \\(\\mathbf{R}\\). First suppose \\(y\\B\\). need look first component union right-hand side \\(\\ref{eq:ordered_sum}\\)—namely, \\(f\\circ\\pi^{ \\cup (C\\smallsetminus B)\\}\\). projection \\(\\pi^{ \\cup (C\\smallsetminus B)\\}(x)\\) \\(x\\) \\(\\mathbf{R}^\\) tells us need consider coordinates \\(x\\) correspond members \\(\\). vector \\(\\mathbf{R}^\\), can apply function \\(f\\) obtain value \\(\\mathbf{R}^B\\). need, since \\(y\\) \\(B\\). Now suppose \\(y\\D\\). need look somewhat complicated second component right-hand side \\(\\ref{eq:ordered_sum}\\), , \\(g\\circ(\\pi^{ \\cup (C\\smallsetminus B) \\C\\smallsetminus B} \\cup (\\pi^{ B\\C\\cap B}\\circ f\\circ \\pi^{ \\cup (C\\smallsetminus B)\\}))\\). Since \\(g: \\mathbf{R}^C\\\\mathbf{R}^D\\), need feed \\(g\\) value \\(\\mathbf{R}^C\\) obtain mapping \\(\\mathbf{R}\\) values (\\(y\\)) \\(D\\). \\(x\\) \\(\\mathbf{R}^{\\cup(C\\smallsetminus B)}\\), \\(x\\) tells values \\(C\\) aren’t also \\(B\\) mapped. mapping values corresponds projection \\(\\pi^{ \\cup (C\\smallsetminus B) \\C\\smallsetminus B}(x)\\), value \\(\\mathbf{R}^{C\\smallsetminus B}\\). find portion mapping need belongs \\(\\mathbf{R}^{C\\cap B}\\), look \\(\\pi^{ B\\C\\cap B}\\circ f\\circ \\pi^{ \\cup (C\\smallsetminus B)\\}\\). just seen, \\(f\\circ \\pi^{ \\cup (C\\smallsetminus B)\\}\\) maps \\(x\\) member \\(\\mathbf{R}^B\\). can apply projection \\(\\pi^{ B\\C\\cap B}\\) obtain member \\(\\mathbf{R}^{C\\cap B}\\). Taking union components \\(\\mathbf{R}^{C\\smallsetminus B}\\) \\(\\mathbf{R}^{C\\cap B}\\) gives us value \\(\\mathbf{R}^C\\), can apply function \\(g\\). result function \\(\\mathbf{R}^D\\) telling values (\\(y\\)) \\(D\\) mapped. perhaps easier understand think terms module inputs outputs: Given mappings values \\(\\) values \\(C\\) aren’t \\(B\\), can obtain mappings values \\(B\\) \\(D\\) follows: Since know inputs \\(\\) module \\(\\mathcal{M}_i\\), can use module obtain outputs \\(B\\). Now know inputs \\(C\\) module \\(\\mathcal{M}_j\\)—aren’t \\(B\\) (given outset), \\(B\\) (obtained applying module \\(\\mathcal{M}_i\\)). yields outputs \\(D\\) module \\(\\mathcal{M}_j\\).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"general-ordered-sum","dir":"Articles","previous_headings":"The BioCro model > Modularization in BioCro > Decomposing the direct module function","what":"General ordered sum","title":"BioCro as a Dynamical System","text":"now generalize notion ordered sum two direct modules ordered sum finite number direct modules. Suppose ordered collection \\((\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_n)\\) direct modules. case direct modules, \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_i=\\emptyset\\) \\(\\). , assume \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cup\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset\\) \\(\\neq j\\), \\(\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset\\) whenever \\(<j\\). define ordered sum \\(\\sum_{=1}^n\\mathcal{M}_i\\) recursively follows:  \\[\\begin{alignat}{2}     \\sum_{=1}^k\\mathcal{M}_i &= M_1 && \\qquad\\text{$k=1$} \\notag \\\\     \\sum_{=1}^k\\mathcal{M}_i &= \\sum_{=1}^{k-1}\\mathcal{M}_i                         + \\mathcal{M}_k && \\qquad                         \\text{$1<k\\leq n$}\\label{eq:recursive_module_sum} \\end{alignat}\\] Things quite simple , however, since must show ordered sum given right-hand side \\(\\ref{eq:recursive_module_sum}\\) always defined. Specifically, must show  \\[\\begin{align}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_k &= \\emptyset         \\label{eq:general_sum_disjoint_outputs} \\\\ \\intertext{}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_k &= \\emptyset. \\label{eq:general_sum_general_condition} \\end{align}\\] easily follows induction equation \\(\\ref{eq:output_of_sum}\\)  \\[\\begin{equation*}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i = \\bigcup_{=1}^{k-1}\\operatorname{\\mathbf{}}\\mathcal{M}_i, \\end{equation*}\\]  \\(\\ref{eq:general_sum_disjoint_outputs}\\) easily follows , distributivity \\(\\cap\\) \\(\\cup\\), assumption outputs modules pairwise disjoint. prove \\(\\ref{eq:general_sum_general_condition}\\), first observe follows immediately \\(\\ref{eq:input_of_sum}\\) \\(\\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) \\subseteq \\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup \\operatorname{\\mathbf{}}M_j\\), easy show induction  \\[\\begin{equation}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\subseteq \\bigcup_{=1}^{k-1}\\operatorname{\\mathbf{}}\\mathcal{M}_i. \\end{equation}\\]  Since stipulation defining ordered sum modules output module ordered collection disjoint inputs module occuring earlier ordering, light distributivity \\(\\cap\\) \\(\\cup\\), desired result \\(\\ref{eq:general_sum_general_condition}\\) immediately follows.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"appendix-degenerate-biocro-systems","dir":"Articles","previous_headings":"","what":"Appendix: Degenerate BioCro systems","title":"BioCro as a Dynamical System","text":"appendix meant demonstrate certain edge cases “-label” uses BioCro systems. systems set using R interface. similar set systems use C++ library directly written C++.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"a-minimal-system","dir":"Articles","previous_headings":"Appendix: Degenerate BioCro systems","what":"A minimal system","title":"BioCro as a Dynamical System","text":"system contains absolute minimum number quantities. Since single time point, timestep present satisfy formal requirement validity checker; otherwise meaningless. formal requirement R interface (C++ interface) set driver variables either contains time contains doy hour. three variables show output. Note ncalls always shows output data frame, even though constant even though system variable. Note also time driver, dominates: doy hour (present) overwritten. time present, doy hour must ; one , get obscure error:","code":"library(BioCro) run_biocro(parameters = list(timestep=1), drivers = data.frame(time=45.625)) ##   doy hour ncalls   time ## 1  45   15      1 45.625 run_biocro(parameters = list(timestep=1), drivers = data.frame(doy=80, hour=14.25)) ##   doy  hour ncalls     time ## 1  80 14.25      1 80.59375 Error in floor(result$time) :      non-numeric argument to mathematical function"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"a-system-having-a-differential-variable-but-no-differential-module","dir":"Articles","previous_headings":"Appendix: Degenerate BioCro systems","what":"A system having a differential variable but no differential module","title":"BioCro as a Dynamical System","text":"noted Section \\(\\ref{sec:BioCro_systems}\\), initial_values parameter determines variables differential variables. Usually, differential variable output one differential modules, required. Differential variables output differential module assumed derivative zero; , constant. system exhibits case.","code":"run_biocro(initial_values = list(x = 52),            parameters = list(timestep=1),            drivers = data.frame(time=0:4)) ##   doy hour ncalls time  x ## 1   0    0      5    0 52 ## 2   1    0      5    1 52 ## 3   2    0      5    2 52 ## 4   3    0      5    3 52 ## 5   4    0      5    4 52"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"an-off-label-use-of-run_biocro","dir":"Articles","previous_headings":"Appendix: Degenerate BioCro systems","what":"An off-label use of run_biocro","title":"BioCro as a Dynamical System","text":"example might called “-label” use BioCro system. system really doesn’t deserve called dynamical system . Although drivers parameter contains five rows temporal spacial data (row specifies time place), rows inherent relationship one another: represent sort evolution system time. times specified rows aren’t even chronological order: although timestep variable supposed indicate temporal relationship successive rows drivers parameter value, convention , enforced. Nevertheless, system useful: uses BioCro:solar_position_michalsky module compute cosine zenith angle sun noon various terrestrial locations various days year. gotten information using five calls run_biocro drivers single row, one call convenient.","code":"result <- run_biocro(parameters = list(timestep=1),                      drivers = data.frame(doy = c(355, 172, 80, 80, 80),                                           hour = 12,                                           time_zone_offset = -6,                                           year = 2022,                                           lat = c(40, 40, 40, 0, 89),                                           longitude = -88),                      direct_module_names = 'BioCro:solar_position_michalsky') result[c('lat', 'longitude', 'doy', 'hour', 'cosine_zenith_angle')] ##   lat longitude doy hour cosine_zenith_angle ## 1  40       -88 355   12          0.44655908 ## 2  40       -88 172   12          0.95824629 ## 3  40       -88  80   12          0.77093280 ## 4   0       -88  80   12          0.99996308 ## 5  89       -88  80   12          0.02509952"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/dynamical_systems.html","id":"a-system-having-only-drivers-and-the-obligatory-timestep-parameter","dir":"Articles","previous_headings":"Appendix: Degenerate BioCro systems","what":"A system having only drivers (and the obligatory timestep parameter)","title":"BioCro as a Dynamical System","text":"Like minimal system shown first example, system differential variables modules. drivers include driver variables aren’t time related. Like systems modules, doesn’t really anything. weather information run displays just easily displayed using","code":"result <- run_biocro(parameters = list(timestep=1),                      drivers = weather$`2005`[1000:1010,]) result[c('year', 'doy', 'hour', 'precip', 'rh', 'solar', 'temp', 'windspeed')] ##    year doy hour     precip      rh   solar  temp windspeed ## 1  2005  42   15 0.01058333 0.73690 755.964 4.530     7.475 ## 2  2005  42   16 0.01058333 0.70095 421.429 5.085     7.445 ## 3  2005  42   17 0.01058333 0.73080 101.775 4.375     5.935 ## 4  2005  42   18 0.01058333 0.80135   1.081 2.465     4.785 ## 5  2005  42   19 0.01058333 0.83150   0.345 1.650     4.115 ## 6  2005  42   20 0.01058333 0.84020   0.299 1.210     3.565 ## 7  2005  42   21 0.01058333 0.87250   0.115 0.635     3.255 ## 8  2005  42   22 0.01058333 0.86045   0.184 0.550     3.760 ## 9  2005  42   23 0.01058333 0.84600   0.138 0.890     4.815 ## 10 2005  43    0 0.00000000 0.82435   0.138 1.250     4.955 ## 11 2005  43    1 0.00000000 0.83260   0.414 1.025     5.675 weather$`2005`[1000:1010,                c('year', 'doy', 'hour', 'precip', 'rh', 'solar', 'temp', 'windspeed')]"},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/pdf_vignette_index.html","id":"a-practical-guide-to-biocro","dir":"Articles","previous_headings":"","what":"A Practical Guide to BioCro","title":"PDF Vignettes","text":"R code Practical Guide BioCro","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/articles/pdf_vignette_index.html","id":"quantitative-comparison-between-two-photosynthesis-models","dir":"Articles","previous_headings":"","what":"Quantitative Comparison Between Two Photosynthesis Models","title":"PDF Vignettes","text":"R code Quantitative Comparison Two Photosynthesis Models","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin M. McGrath. Maintainer, author. Edward B. Lochocki. Author. Scott Rohde. Author. Deepak Jaiswal. Author. Megan L. Matthews. Author. Fernando E. Miguez. Author. Stephen P. Long. Author. Dan Wang. Contributor. David LeBauer. Contributor. BioCro authors. Copyright holder. Boost Organization. Copyright holder.            Author included Boost library","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McGrath J, Lochocki E, Rohde S, Jaiswal D, Matthews M, Miguez F, Long S (2022). BioCro: Modular Crop Growth Simulations. R package version 3.0.0, https://github.com/ebimodeling/biocro.","code":"@Manual{,   title = {BioCro: Modular Crop Growth Simulations},   author = {Justin M. McGrath and Edward B. Lochocki and Scott Rohde and Deepak Jaiswal and Megan L. Matthews and Fernando E. Miguez and Stephen P. Long},   year = {2022},   note = {R package version 3.0.0},   url = {https://github.com/ebimodeling/biocro}, }"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"biocro","dir":"","previous_headings":"","what":"BioCro","title":"Modular Crop Growth Simulations","text":"BioCro model predicts plant growth time given crop-specific parameters environmental data input. uses models key physiological biophysical processes underlying plant growth (Humphries Long, 1995), previously used predicting biomass yield leaf area index switchgrass miscanthus (Miguez et al., 2009). BioCro also integrated suite tools link model directly crop trait yield data (LeBauer et al., 2014). Predictive Ecosystem Analyzer (PEcAn) couples BioCro Biofuel Ecophysiological Traits Yields database.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"an-example","dir":"","previous_headings":"BioCro","what":"An example","title":"Modular Crop Growth Simulations","text":"run_biocro() function accepts initial values, parameters, climate variables, sets modules run. returns results data frame. parameters modules soybean (Glycine max), miscanthus (Miscanthus x giganteus), willow (Saliceae salix).","code":"library(BioCro) library(lattice)  result <- with(soybean, {run_biocro(   initial_values,   parameters,   soybean_weather$'2002',   direct_modules,   differential_modules,   ode_solver )})  xyplot(Stem + Leaf ~ TTc, data = result, type='l', auto = TRUE)"},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"requirements","dir":"","previous_headings":"BioCro > Installation","what":"Requirements","title":"Modular Crop Growth Simulations","text":"R environment version 3.5.0 greater. Windows, version Rtools appropriate version R. Linux, gcc g++ version 4.9.3 greater (consult documentation distribution installation instructions). MacOS, Xcode.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"installation-steps","dir":"","previous_headings":"BioCro > Installation","what":"Installation steps","title":"Modular Crop Growth Simulations","text":"Download BioCro source code GitHub, unzip file, install either command line within R using one following sets commands. one sets instruction . assume source files directory named “biocro”. command line within R","code":"cd path_to_unzipped_directory R CMD INSTALL biocro setwd('path_to_unzipped_directory') install.packages('biocro', repos=NULL, type='SOURCE')"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"making-contributions","dir":"","previous_headings":"BioCro","what":"Making contributions","title":"Modular Crop Growth Simulations","text":"Please see contribution guidelines submitting changes.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"software-documentation","dir":"","previous_headings":"BioCro","what":"Software Documentation","title":"Modular Crop Growth Simulations","text":"See BioCro Documentation Web Site. found standard package documentation, also documentation C++ code, including notes biological models used BioCro implementation. Also included documentation BioCro package developers maintainers.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Modular Crop Growth Simulations","text":"Humphries S Long SP (1995) WIMOVAC - software package modeling dynamics plant leaf canopy photosynthesis. Computer Applications Bioscience 11(4):361-371. Miguez FE, Zhu XG, Humphries S, Bollero GA, Long SP (2009) semimechanistic model predicting growth production bioenergy crop Miscanthus × giganteus: description, parameterization validation. Global Change Biology Bioenergy 1: 282-296. LeBauer D, Wang D, Richter K, Davidson C, Dietze M (2014) Facilitating feedbacks field measurements ecosystem models. Ecological Monographs 83(2): 133-154. Wang D, Jaiswal D, Lebauer DS, Wertin TM, Bollero GA, Leakey ADB, Long SP (2015) physiological biophysical model coppice willow (Salix spp.) production yields contiguous USA current future climate scenarios. Plant, Cell & Environment 38(9), 1850-1865.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/add_time_to_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a time component to input — add_time_to_weather_data","title":"Add a time component to input — add_time_to_weather_data","text":"Ensure, possible, input data varies time \"time\" component.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/add_time_to_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a time component to input — add_time_to_weather_data","text":"","code":"add_time_to_weather_data(drivers)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/add_time_to_weather_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a time component to input — add_time_to_weather_data","text":"drivers list dataframe representing known system parameters vary     time, weather data.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/add_time_to_weather_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a time component to input — add_time_to_weather_data","text":"drivers time component, one added, provided components doy hour. (time values equal doy values plus fractional portion day represented hour values.) Otherwise drivers returned .","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/add_time_to_weather_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a time component to input — add_time_to_weather_data","text":"Preconditions: drivers list, values vectors equal length.  Moreover, already contains time component, contain either doy hour component unless contains values mutually consistent.  Furthermore, time represented (doy, hour), given, time, given, increase vector row index increases.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/annualDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus dry biomass data. — annualDB","title":"Miscanthus dry biomass data. — annualDB","text":"first column thermal time. second, third, fourth, fifth     columns miscanthus stem, leaf, root, rhizome dry biomass Mg     ha-1 (root missing). sixth column leaf area index.     annualDB.c version altered root biomass     missing LAI smaller. purpose last modification     testing functions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/annualDB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus dry biomass data. — annualDB","text":"Data frame dimensions 5 6.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/annualDB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus dry biomass data. — annualDB","text":"Clive Beale Stephen Long. 1997. Seasonal dynamics nutrient     accumulation partitioning perennial C4 grasses Miscanthus x     giganteus Spartina cynosuroides. Biomass Bioenergy 12 (6): 419--428.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/catm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Global annual mean atmopspheric CO2 levels — catm_data","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Multiple years globally averaged annual mean atmospheric CO2 levels   uncertainties. data included BioCro package users can reproduce   calculations Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/catm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"","code":"catm_data"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/catm_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data frame 3 columns 41 rows: year: year Catm: CO2 concentration (micromol / mol) unc: uncertainty associated CO2 concentration           (micromol / mol)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/catm_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data obtained National Oceanic Atmospheric Administration's   Global Monitoring Laboratory (https://gml.noaa.gov/ccgg/trends/data.html)   04-13-2021. exact link used   https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_gl.txt. Alternatively, data can accessed   https://gml.noaa.gov/ccgg/trends/gl_data.html clicking link   Globally averaged marine surface annual mean data (CSV). data provided convenience BioCro users; please visit   NOAA GML webpage guidelines regarding use data   intending include publication.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_soybean_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Champaign, IL weather data specified hourly intervals CST time zone   years 2002, 2004, 2005, 2006. data includes typical inputs   required BioCro simulations, addition day_length,   specifically required soybean simulations. Although quantity can   calculated modules course simulation, included   weather data speed simulations. time range restricted   SoyFACE growing season used year. weather data included BioCro package users can reproduce   calculations Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_soybean_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"","code":"soybean_weather"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_soybean_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"list 4 named elements, element data frame corresponding   one year weather data name element year,   example '2004'. data frame 2952 - 3384 observations   (representing hourly time points) 14 variables: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) dw_solar: downwelling global solar radiation (J / m^2 / s) up_solar: upwelling global solar radiation (J / m^2 / s) netsolar: net global solar radiation (downwelling - upwelling)           (J / m^2 /s) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s) zen: solar zenith angle (degrees) day_length: length daily photoperiod (hours)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_soybean_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ]. See paper full description   data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set dw_solar: dw_solar variable SURFRAD data           set up_solar: uw_solar variable SURFRAD data           set netsolar: netsolar variable SURFRAD data           set solar: par variable SURFRAD data set;           values available, netsolar           up_solar variables used make estimate;           values also available, dw_solar variable used           make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set zen: zen variable SURFRAD data set day_length: calculated solar using           oscillator-based circadian clock WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour. values missing; missing   entries filled interpolating neighboring hours. create data frame, hourly values columns except   day_length extracted WARM SURFRAD data. , BioCro   used run circadian clock model determines photoperiod length.   (See page additional information clock model:   soybean_clock.) result calculation   appended weather data frame new column. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data — cmi_weather_data","title":"Champaign, IL weather data — cmi_weather_data","text":"Champaign, IL weather data specified hourly intervals CST time zone   years 1995--2020. data includes typical inputs required BioCro   imulations. Note: values missing near start 1995 since   time points available SURFRAD. weather data included BioCro package users can reproduce   calculations Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data — cmi_weather_data","text":"","code":"weather"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data — cmi_weather_data","text":"list 26 named elements, element data frame corresponding   one year weather data name element year,   example '2004'. data frame 8760 8784 observations   (representing hourly time points) 9 variables: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/cmi_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data — cmi_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ]. See paper full description   data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set solar: par variable SURFRAD data set;           values available, direct_n,           diffuse, zen variables used make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour-long interval centered h.   values missing; missing entries filled via interpolation   procedure based assumption values hour sequential   days similar. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/crop_model_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop model definitions — crop_model_definitions","title":"Crop model definitions — crop_model_definitions","text":"BioCro, crop model defined sets direct modules, differential   modules, initial values, parameters, along ordinary differential   equation (ODE) solver. run model, values, along set   weather data, passed run_biocro function.   convenience, several crop model definitions included BioCro R   package. full list can obtained typing ??crop_models R   terminal.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/crop_model_definitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop model definitions — crop_model_definitions","text":"crop model definition stored list following named   elements: direct_modules: list direct module names; can passed     run_biocro direct_module_names argument. differential_modules: list differential module names; can     passed run_biocro     differential_module_names argument. ode_solver: list specifying details numerical ODE     solver; can passed run_biocro ode_solver     argument. initial_values: list named quantity values; can passed     run_biocro initial_values argument. parameters: list named quantity values; can passed     run_biocro parameters argument, also can     passed evaluate_module     module_response_curve investigating behavior one     crop's modules. model definitions sufficient running simulation   run_biocro also requires drivers; crop growth models,   drivers sets weather data. soybean model   intended used along specialized soybean weather data   (see cmi_soybean_weather_data). crops used   weather data (see cmi_weather_data). quantities crop model definitions, values   photosynthetic parameters, remain location; others,   latitude longitude, need change simulating crop growth   different locations. Care must taken understand input quantity   attempting run simulations places cultivars. Typically, modules crop model definition defined lists   named elements; names facilitate --fly module swapping via   within function. example, change soybean canopy   photosynthesis module BioCro:ten_layer_rue_canopy module, one   pass within(soybean$direct_modules, {canopy_photosynthesis =   \"BioCro:ten_layer_rue_canopy\"}) direct_module_names argument   calling run_biocro instead   soybean$direct_modules. crop model definition stored list named elements,   possible use function save typing   calling run_biocro related functions   partial_run_biocro   validate_dynamical_system_inputs. example, compare   Example 1 Example 2 . Besides shortening code,   using also makes easy modify command simulate   growth different crop; two models can use drivers,   switch can accomplished one small change (Example 3).","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/crop_model_definitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop model definitions — crop_model_definitions","text":"","code":"# Example 1: Simulating Miscanthus growth using its model definition list result1 <- run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   get_growing_season_climate(weather$'2002'),   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver )  # Example 2: Performing the same simulation as in Example 1, but making use of # the `with` command to reduce repeated references to the model definition list result2 <- with(miscanthus_x_giganteus, {run_biocro(   initial_values,   parameters,   get_growing_season_climate(weather$'2002'),   direct_modules,   differential_modules,   ode_solver )})  # Example 3: Simulating willow growth using the same weather data as Examples 1 # and 2, which just requires one change relative to Example 2 result3 <- with(willow, {run_biocro(   initial_values,   parameters,   get_growing_season_climate(weather$'2002'),   direct_modules,   differential_modules,   ode_solver )})"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Validating dynamical system inputs — dynamical_system","title":"Validating dynamical system inputs — dynamical_system","text":"Utility function checking inputs run_biocro without running ","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"validate_dynamical_system_inputs(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     verbose = TRUE )"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validating dynamical system inputs — dynamical_system","text":"initial_values Identical corresponding argument run_biocro. parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro. verbose Identical corresponding argument run_biocro.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validating dynamical system inputs — dynamical_system","text":"validate_dynamical_system_inputs accepts input arguments   run_biocro exception ode_solver (  required check validity dynamical system). validate_dynamical_system_inputs checks set parameters, drivers,   modules, initial values see can properly define dynamical   system can therefore used inputs run_biocro.   Although run_biocro function performs validity   checks, validate_dynamical_system_inputs includes additional   information, list parameters whose values used inputs   modules, since principle parameters removed   clarity. using one pre-defined crop growth models, may helpful   use command pass arguments   validate_dynamical_system_inputs; see documentation   crop_model_definitions information.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validating dynamical system inputs — dynamical_system","text":"boolean indicating whether inputs valid.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/dynamical_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"# Example 1: missing a parameter and an initial value validate_dynamical_system_inputs(   within(soybean$initial_values, rm(Leaf)),         # remove the initial `Leaf` value   within(soybean$parameters, rm(leaf_reflectance)), # remove `leaf_reflectance`   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules ) #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [fail] The following module inputs were not defined: #>  Leaf from the 'parameter_calculator' module #>  leaf_reflectance from the 'ten_layer_canopy_properties' module #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'partitioning_growth' module #>  #> [fail] The following differential module outputs were not part of the initial values: #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'partitioning_growth' module #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are not valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules are in a suitable order for evaluation. #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Gs_min #>  Leaf #>  LeafN #>  LeafN_0 #>  O2 #>  Rd #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  absorptivity_par #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  average_absorbed_shortwave_layer_0 #>  average_absorbed_shortwave_layer_1 #>  average_absorbed_shortwave_layer_2 #>  average_absorbed_shortwave_layer_3 #>  average_absorbed_shortwave_layer_4 #>  average_absorbed_shortwave_layer_5 #>  average_absorbed_shortwave_layer_6 #>  average_absorbed_shortwave_layer_7 #>  average_absorbed_shortwave_layer_8 #>  average_absorbed_shortwave_layer_9 #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaStem #>  canopy_assimilation_rate #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kStem #>  kd #>  kpLN #>  lai #>  lat #>  leaf_reflectance #>  leaf_transmittance #>  lnfun #>  longitude #>  maturity_group #>  minimum_gbw #>  mrc1 #>  mrc2 #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rh_layer_0 #>  rh_layer_1 #>  rh_layer_2 #>  rh_layer_3 #>  rh_layer_4 #>  rh_layer_5 #>  rh_layer_6 #>  rh_layer_7 #>  rh_layer_8 #>  rh_layer_9 #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  shaded_incident_ppfd_layer_0 #>  shaded_incident_ppfd_layer_1 #>  shaded_incident_ppfd_layer_2 #>  shaded_incident_ppfd_layer_3 #>  shaded_incident_ppfd_layer_4 #>  shaded_incident_ppfd_layer_5 #>  shaded_incident_ppfd_layer_6 #>  shaded_incident_ppfd_layer_7 #>  shaded_incident_ppfd_layer_8 #>  shaded_incident_ppfd_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_time #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  sunlit_incident_ppfd_layer_0 #>  sunlit_incident_ppfd_layer_1 #>  sunlit_incident_ppfd_layer_2 #>  sunlit_incident_ppfd_layer_3 #>  sunlit_incident_ppfd_layer_4 #>  sunlit_incident_ppfd_layer_5 #>  sunlit_incident_ppfd_layer_6 #>  sunlit_incident_ppfd_layer_7 #>  sunlit_incident_ppfd_layer_8 #>  sunlit_incident_ppfd_layer_9 #>  tbase #>  temp #>  theta #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  water_stress_approach #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> The following parameters were not used as inputs to any module: #>  soil_bulk_density #>  soil_clay_content #>  soil_silt_content #> You may want to consider removing them for clarity #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Leaf #>  Rhizome #>  Root #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] FALSE  # Example 2: a valid set of input arguments validate_dynamical_system_inputs(   soybean$initial_values,   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules ) #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [pass] All module inputs were properly defined #>  #> [pass] All differential module outputs were included in the initial values #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules are in a suitable order for evaluation. #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Gs_min #>  Leaf #>  LeafN #>  LeafN_0 #>  O2 #>  Rd #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  absorptivity_par #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  average_absorbed_shortwave_layer_0 #>  average_absorbed_shortwave_layer_1 #>  average_absorbed_shortwave_layer_2 #>  average_absorbed_shortwave_layer_3 #>  average_absorbed_shortwave_layer_4 #>  average_absorbed_shortwave_layer_5 #>  average_absorbed_shortwave_layer_6 #>  average_absorbed_shortwave_layer_7 #>  average_absorbed_shortwave_layer_8 #>  average_absorbed_shortwave_layer_9 #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaStem #>  canopy_assimilation_rate #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kStem #>  kd #>  kpLN #>  lai #>  lat #>  leaf_reflectance #>  leaf_transmittance #>  lnfun #>  longitude #>  maturity_group #>  minimum_gbw #>  mrc1 #>  mrc2 #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rh_layer_0 #>  rh_layer_1 #>  rh_layer_2 #>  rh_layer_3 #>  rh_layer_4 #>  rh_layer_5 #>  rh_layer_6 #>  rh_layer_7 #>  rh_layer_8 #>  rh_layer_9 #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  shaded_incident_ppfd_layer_0 #>  shaded_incident_ppfd_layer_1 #>  shaded_incident_ppfd_layer_2 #>  shaded_incident_ppfd_layer_3 #>  shaded_incident_ppfd_layer_4 #>  shaded_incident_ppfd_layer_5 #>  shaded_incident_ppfd_layer_6 #>  shaded_incident_ppfd_layer_7 #>  shaded_incident_ppfd_layer_8 #>  shaded_incident_ppfd_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_time #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  sunlit_incident_ppfd_layer_0 #>  sunlit_incident_ppfd_layer_1 #>  sunlit_incident_ppfd_layer_2 #>  sunlit_incident_ppfd_layer_3 #>  sunlit_incident_ppfd_layer_4 #>  sunlit_incident_ppfd_layer_5 #>  sunlit_incident_ppfd_layer_6 #>  sunlit_incident_ppfd_layer_7 #>  sunlit_incident_ppfd_layer_8 #>  sunlit_incident_ppfd_layer_9 #>  tbase #>  temp #>  theta #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  water_stress_approach #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> The following parameters were not used as inputs to any module: #>  soil_bulk_density #>  soil_clay_content #>  soil_silt_content #> You may want to consider removing them for clarity #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Leaf #>  Rhizome #>  Root #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] TRUE"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lists of modules, quantities, and solvers — get_all","title":"Get lists of modules, quantities, and solvers — get_all","text":"get_all_modules returns fully-qualified names (form   library_name:local_module_name) modules available BioCro   module library package. get_all_quantities returns information quantities used   inputs outputs modules available BioCro module library package. get_all_ode_solvers returns names ordinary differential   equation (ODE) solvers available BioCro framework.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lists of modules, quantities, and solvers — get_all","text":"","code":"get_all_modules(library_name)    get_all_quantities(library_name)    get_all_ode_solvers()"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lists of modules, quantities, and solvers — get_all","text":"library_name name BioCro module library","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lists of modules, quantities, and solvers — get_all","text":"\"get_all\" functions return modules, quantities, ODE solvers   available within BioCro framework BioCro module library package. Developer details: get_all_modules   get_all_quantities expect module library package include   unexported functions called get_all_modules_internal   get_all_quantities_internal, respectively. functions   input arguments, return values follow   requirements described get_all_modules   get_all_quantities. module library package created forking   skeleton library automatically include functions without   modifications package's R code.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lists of modules, quantities, and solvers — get_all","text":"get_all_modules character vector fully-qualified module names get_all_quantities data frame three columns:     quantity_type (input output), quantity_name,     module_name. quantity appear multiple times use     input output, used multiple modules. get_all_ode_solvers character vector ODE solver names","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lists of modules, quantities, and solvers — get_all","text":"","code":"# Example 1: Getting a sorted list of distinct quantities defined by modules in # the `BioCro` module library. Doing this can be useful when writing a new # module that is intended to work along with pre-existing modules. all_quantities <- get_all_quantities('BioCro') all_quantity_names <- all_quantities$quantity_name distinct_quantities <- sort(unique(all_quantity_names))  # Example 2: Getting a list of all modules in the `BioCro` module library that # have \"ci\" as an input or output, using `tolower()` to account for any possible # variations in capitalization. all_quantities <- get_all_quantities('BioCro') ci_modules <- subset(all_quantities, tolower(quantity_name) == \"ci\")"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_growing_season_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate weather data to one growing season — get_growing_season_climate","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"Attempt restrict year weather data growing season; intended   general-use function (see detailed discussion   shortcomings).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_growing_season_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"","code":"get_growing_season_climate(climate, threshold_temperature = 0)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_growing_season_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"climate data frame representing one year weather data, typically intended     passed run_biocro drivers argument. data     frame must columns day year (doy) air     temperature degrees C (temp). threshold_temperature value air temperature degrees C use locating beginning     end growing season.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_growing_season_climate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"DISCLAIMER: function included primarily reproduce   output older BioCro calculations, used hard-coded   every simulation. several severe limitations discussed ,   intended general-use function subsetting weather data. determine growing season, function locates beginning end   based air temperature data. start growing season set   last day first half year air temperature   (equal ) threshold temperature, day 90, whichever later.   end growing season set first day second half   year air temperature (equal ) threshold   temperature, day 330, whichever earlier. sophisticated function attempt made ensure   output reasonable. example, air temperature never exceeds   threshold value, growing season beginning day 183 (last day   first half year) ending day 184 (first day second   half year) returned. air temperature always exceeds   threshold value, growing season go day 90 day 330. function also assumes air temperature generally increases early   year generally decreases later year, applicable   locations case. therefore unlikely work   properly Southern Hemisphere tropics. general, appropriate threshold temperature depend species   modeled. perennial grass, growth season might said   begin last freeze, requiring threshold temperature 0 degrees   C. course, oversimplification complicated biological   process, plant way knowing experienced last   freezing day year. hand, annual crops like maize soybean typically sown   conditions warmer might require higher threshold. ,   oversimplification complicated process. Farmers typically take   trends temperature, historical data, soil conditions, weather   predictions account deciding sow, may also   constrained external factors like availability machinery, seeds,   labor. also noted threshold temperature increases,   likelihood air temperature occurring night, even middle   summer, also increases. Consequently, threshold set high,   unrealistically short growing season may predicted. example, calling   get_growing_season_climate(weather$'2005', 15) returns two-day   growing season (days 183--184) temperatures late night   day 183 early morning day 184 dip 15 degrees C. Thus, logic encoded oversimplification several ways.   likely appropriate many situations, tailored approaches   required.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/get_growing_season_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"copy climate data frame truncated growing season.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/glycine_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Glycine max model definition — glycine_max","title":"Glycine max model definition — glycine_max","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run Glycine max   (soybean) growth simulations Champaign, Illinois locations. Note   model distinct soybean model,   published validated experimental data. represent soybean growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/glycine_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glycine max model definition — glycine_max","text":"","code":"glycine_max"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/glycine_max.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Glycine max model definition — glycine_max","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/glycine_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glycine max model definition — glycine_max","text":"model, error tolerances greater 1e-5 may cause problems   crop model regression tests,   glycine_max$ode_solver$adaptive_rel_error_tol   glycine_max$ode_solver$adaptive_abs_error_tol set   1e-5.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates the light macro environment — lightME","title":"Simulates the light macro environment — lightME","text":"Simulates light macro environment based latitude, day year.     coefficients can adjusted. Note: type special-purpose     function now deprecated, lightME included BioCro     namespace. reason, must accessed via BioCro:::lightME.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates the light macro environment — lightME","text":"","code":"lightME(lat = 40, DOY = 190, t.d = 12, t.sn = 12, atm.P = 1e+05, alpha = 0.85)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates the light macro environment — lightME","text":"lat latitude, default 40 (Urbana, IL, U.S.). DOY day year ([1, 365]), default 190. t.d time day hours ([0, 23]), default 12. t.sn time solar noon, default 12. atm.P atmospheric pressure, default 1e5 (kPa). alpha atmospheric transmittance, default 0.85.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates the light macro environment — lightME","text":"list structure components:  \".dir\"Direct radiation (micromoles m^-2 s-1) \".diff\"Indirect (diffuse) radiation (micromoles m^-2 s-1) \"cos.th\"cosine \\(\\theta\\), solar zenith angle. \"propIdir\"proportion direct radiation. \"propIdiff\"proportion indirect (diffuse) radiation.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates the light macro environment — lightME","text":"equations used can found     http://www.life.illinois.edu/plantbio/wimovac/newpage9.htm     original source Monteith, 1991.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/lightME.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates the light macro environment — lightME","text":"","code":"## Direct and diffuse radiation for DOY 190 and hours 0 to 23  res <- BioCro:::lightME(t.d=0:23)  lattice::xyplot(   I.dir + I.diff ~ 0:23,   data = res,   type = 'o',   xlab = 'hour',   ylab = 'Irradiance' )   lattice::xyplot(   propIdir + propIdiff ~ 0:23,   data = res,   type='o',   xlab='hour',   ylab='Irradiance proportion' )   plot(acos(BioCro:::lightME(lat = 42, t.d = 0:23)$cos.th) * 180 / pi)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/manihot_esculenta.html","id":null,"dir":"Reference","previous_headings":"","what":"Manihot esculenta model definition — manihot_esculenta","title":"Manihot esculenta model definition — manihot_esculenta","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run   Manihot esculenta (cassava) growth simulations Champaign, Illinois   locations. Note model published validated   experimental data. represent cassava growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/manihot_esculenta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manihot esculenta model definition — manihot_esculenta","text":"","code":"manihot_esculenta"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/manihot_esculenta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Manihot esculenta model definition — manihot_esculenta","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/manihot_esculenta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manihot esculenta model definition — manihot_esculenta","text":"model, error tolerances greater 1e-5 may cause problems   crop model regression tests,   manihot_esculenta$ode_solver$adaptive_rel_error_tol   manihot_esculenta$ode_solver$adaptive_abs_error_tol set   1e-5.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/miscanthus_x_giganteus.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus model definition — miscanthus_x_giganteus","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run   Miscanthus x giganteus growth simulations Champaign, Illinois   locations. represent Miscanthus growth Champaign, IL, values must   paired Champaign weather data (cmi_weather_data).   parameters already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/miscanthus_x_giganteus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"","code":"miscanthus_x_giganteus"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/miscanthus_x_giganteus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/miscanthus_x_giganteus.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"model originally described Miguez et al. (2009)   [doi:10.1111/j.1757-1707.2009.01019.x ] Miguez et al. (2012)   [doi:10.1111/j.1757-1707.2011.01150.x ]. Since original parameterization,   behavior several core modules changed bugs   identified fixed, model likely needs reparameterized   can used realistic simulations.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Define and modify BioCro module test case files — module_case_files","title":"Define and modify BioCro module test case files — module_case_files","text":"Test cases testing modules can stored files. functions   provide ways create update files. initialize_csv helps define test cases module testing   initializing csv file one module based either set   default input values user-supplied ones. add_csv_row helps define test cases module testing adding one   test case module's csv file based user-supplied inputs   description. update_csv_cases helps define cases module testing updating   expected output values case stored module's csv file.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define and modify BioCro module test case files — module_case_files","text":"","code":"initialize_csv(     module_name,     directory,     nonstandard_inputs = list(),     description = \"automatically-generated test case\",     overwrite = FALSE   )    add_csv_row(module_name, directory, inputs, description)    update_csv_cases(module_name, directory)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define and modify BioCro module test case files — module_case_files","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases'). inputs list module inputs, .e., list named numeric elements     corresponding module's input quantities. description string describing test case, e.g. \"temp tbase\".     description succinct contain newline characters. nonstandard_inputs optional list input quantities whose values override default     value 1.0; see inputs entry . overwrite logical value indicating whether existing file overwritten.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define and modify BioCro module test case files — module_case_files","text":"Module test case files form critical component BioCro's regression   testing system. details, see help page   module_testing. initialize_csv function evaluate module set input   quantities store results test case csv file. Typically,   optional arguments can omitted. However, modules produce   errors inputs set 1.0. case, necessary   supply nonstandard inputs (possibly) alternate case description. add_csv_row function evaluate module set input   quantities, define test case resulting outputs description,   add module's corresponding csv file. csv   file exists, one initialized new case. update_csv_cases function evaluate module input   values specified csv case file update stored values   corresponding outputs. output columns present file   added automatically filled correct values. Although output   columns optional, description column must exist csv   file. module test fails update_csv_cases used update test,   care taken ensure new outputs sensible.   function used blindly ensure tests pass, since test   failure may indicate real problem module. Note update_csv_cases can used batch-initialize test cases.   , manually create test case csv file proper name   includes columns inputs description; now, calling   update_csv_cases automatically fill outputs case.   method, care must taken manually specifying values   description column; descriptions must double quoted,   contain internal double quotes, quotes must doubled. Generally   safest simply avoid double quotes descriptions. (See qmethod   help file write.csv details quoting.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define and modify BioCro module test case files — module_case_files","text":"message indicating whether file created, overwritten, written.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_case_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define and modify BioCro module test case files — module_case_files","text":"","code":"# First, we will initialize a test case file for the 'BioCro' library's # 'thermal_time_linear' module, which will be saved in the current directory as # 'BioCro_thermal_time_linear.csv'. Then, we will add a new case to the file. # Finally, we will update the file. Note that the call to `update_csv_cases` # will not actually modify the file unless it is manually edited beforehand to # change an input or output value.  if (FALSE) {  initialize_csv(   'BioCro:thermal_time_linear',   '.',   nonstandard_inputs = list(temp = -1),   overwrite = TRUE )  add_csv_row(   'BioCro:thermal_time_linear',   '.',   list(time = 101, sowing_time = 100, tbase = 20, temp = 44),   'temp above tbase' )  update_csv_cases('BioCro:thermal_time_linear', '.') }"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":null,"dir":"Reference","previous_headings":"","what":"Create instances of modules — module_creators","title":"Create instances of modules — module_creators","text":"Creates pointers module wrapper objects","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create instances of modules — module_creators","text":"","code":"module_creators(module_names)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create instances of modules — module_creators","text":"module_names vector module names","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create instances of modules — module_creators","text":"function used internally several BioCro functions,   purpose create instances module wrapper pointers using BioCro's   module library return pointers wrappers. turn, module wrappers   can used obtain information module's inputs, outputs,   properties, can also used create module instance. See   Also section contains list functions directly rely   module_creators. Although description externalptr objects sparse,   briefly mentioned R documentation: externalptr-class. function used directly, module library package   must version. reasons, function exported   package namespace can accessed using package name via   ::: operator.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create instances of modules — module_creators","text":"vector R externalptr objects point  module_creator C++ object","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_creators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create instances of modules — module_creators","text":"","code":"# Example: creating a vector of pointers to several module wrappers representing # three options for thermal time calculations module_pointers <- BioCro:::module_creators(c(   'thermal_time_linear',   'thermal_time_bilinear',   'thermal_time_trilinear' ))"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend library name to module names — module_paste","title":"Prepend library name to module names — module_paste","text":"Prepends library name set module names create   suitably-formatted set fully-qualified module names can passed   run_biocro BioCro functions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend library name to module names — module_paste","text":"","code":"module_paste(lib_name, local_module_names)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend library name to module names — module_paste","text":"lib_name string specifying module library name. local_module_names vector list module name strings.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepend library name to module names — module_paste","text":"module_paste convenience function specifying multiple modules   library; prepends library name module name,   preserving names class local_module_names. Note simple call paste0(lib_name, ':', local_module_names)   produce similar output two important differences: (1)   paste0 preserve names local_module_names   named elements (2) paste0 always return character   vector, even local_module_names list.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend library name to module names — module_paste","text":"vector list fully-qualified module name strings formatted like  lib_name:local_module_name.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepend library name to module names — module_paste","text":"","code":"# Example: Specifying several modules from the `BioCro` module library. modules <- module_paste(   'BioCro',   list('total_biomass', canopy_photosynthesis = 'c3_canopy') )  # Compare to the output from `paste0` modules2 <- paste0(   'BioCro',   ':',   list('total_biomass', canopy_photosynthesis = 'c3_canopy') )  str(modules) #> List of 2 #>  $                      : chr \"BioCro:total_biomass\" #>  $ canopy_photosynthesis: chr \"BioCro:c3_canopy\" str(modules2) #>  chr [1:2] \"BioCro:total_biomass\" \"BioCro:c3_canopy\""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"The BioCro module testing system — module_testing","title":"The BioCro module testing system — module_testing","text":"BioCro provides several functions defining, modifying, running module   test cases. functions together allow module developers easily create   regression tests ensure modules continue function correctly.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/module_testing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The BioCro module testing system — module_testing","text":"Together, test_module_library, test_module,   case, cases_from_csv,   initialize_csv, add_csv_row,   update_csv_cases form simple convenient system   defining running module test cases. tests form critical component   BioCro's regression testing system, test cases defined   BioCro modules BioCro module libraries. functions   required order use BioCro package, critical   understand creating modifying modules. module test case consists set module inputs, set module   outputs, short description case. run test, inputs   passed module, calculated outputs compared   expected ones. outputs match, test passed; otherwise, fails.   operation handled test_module function. simple --fly testing, possible define test case using   case function run using test_module.   However, robust method available facilitate regression testing,   module test cases stored suitably-formatted csv files,   allowing multiple test cases defined module easily checked   afterwards. test case files module module library stored   single directory, test cases can checked one call   test_module_library. system, test cases module fully-qualified name   module_name must stored module_name.csv,   colon module name replaced underscore;   example, module named BioCro:total_biomass associated   BioCro_total_biomass.csv. first row test case file must   quantity types (input output), second row must   quantity names, remaining rows must specify input quantity values   along expected output values produce. must also   description column (description first row)   containing short descriptions test cases. formatting requirements   automatically satisfied test case file produced   initialize_csv modified add_csv_row   update_csv_cases. files can read R using   cases_from_csv, resulting case objects can passed   test_module. Although possible, directly editing case files recommended   since initialize_csv, add_csv_row,   update_csv_cases easier use. several exceptions   suggestion: (1) case must deleted, (2) module input   must added removed, (3) initialization test file,   user may wish batch-initialize using update_csv_cases   (see documentation explanation batch-initialization). Case files can easily viewed using Excel spreadsheet viewers,   also nicely formatted viewed GitHub website   repository. Examples module test case files can found   tests/module_test_cases directory, code uses   testthat package automatically run defined   test cases standard BioCro module library via   test_module_library can found   tests/testthat/test.Modules.R file.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":null,"dir":"Reference","previous_headings":"","what":"BioCro module functions — modules","title":"BioCro module functions — modules","text":"BioCro modules named sets equations, module available   BioCro module library. module identified   fully-qualified name   includes name library local name within library.   functions provide ways access information modules   calculate output values sets input values. module_info returns essential information BioCro module. quantity_list_from_names initializes list named numeric elements   set names. evaluate_module runs BioCro module using list input quantity   values. module_response_curve runs BioCro module repeatedly different   input quantity values produce response curve.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BioCro module functions — modules","text":"","code":"module_info(module_name, verbose = TRUE)    quantity_list_from_names(quantity_names)    evaluate_module(module_name, input_quantities)    module_response_curve(module_name, fixed_quantities, varying_quantities)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BioCro module functions — modules","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. verbose boolean indicating whether print information R console. input_quantities list named numeric elements representing input quantities required     module; extraneous quantities ignored module. quantity_names vector strings. fixed_quantities list named numeric elements representing input quantities required     module whose values considered constant;     extraneous quantities ignored module. varying_quantities data frame column represents input quantity required     module whose value varies across response curve.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BioCro module functions — modules","text":"providing avenues retrieving information module evaluating   module's equations, module_info evaluate_module   functions form main interface individual BioCro modules within R.   quantity_list_from_names function convenience function   preparing suitable quantity lists pass evaluate_module. module_response_curve function provides convenient way   calculate module response curve. , user must specify module   use, values fixed input quantities (input_quantities),   sequence values quantities vary across response curve   (varying_quantities). returned data frame includes   information required reproduce curve: full-qualified   module name, inputs (including ones constant values),   outputs. Note: one quantity q input output   module, input value stored q column returned   data frame output value stored q.1 column;   renaming performed automatically make.unique function.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BioCro module functions — modules","text":"module_info invisible list several named elements containing     essential information module: module_name: module's (-fully-qualified) name inputs: character vector module's inputs outputs: character vector module's outputs type: module's type represented string (either             'differential' 'direct') euler_requirement: Indicates whether module requires             fixed-step Euler ODE solver used BioCro simulation creation_error_message: Describes errors occurred             creating instance module  quantity_list_from_names list named numeric elements, names set     quantity_names value set 1. evaluate_module list named numeric elements representing values module's     outputs calculated input_quantities according     module's equations. module_response_curve data frame first column fully-qualified name     module produced response curve remaining columns     module's input output quantities. row corresponds row     varying_quantities.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BioCro module functions — modules","text":"","code":"# Example 1: printing information about the 'BioCro' module library's # 'c3_assimilation' module to the R console module_info('BioCro:c3_assimilation') #>  #>  #> Module name: #>   c3_assimilation #>  #> Module input quantities: #>   Qp #>   Tleaf #>   rh #>   vmax1 #>   jmax #>   tpu_rate_max #>   Rd #>   b0 #>   b1 #>   Gs_min #>   Catm #>   atmospheric_pressure #>   O2 #>   theta #>   StomataWS #>   water_stress_approach #>   electrons_per_carboxylation #>   electrons_per_oxygenation #>  #> Module output quantities: #>   Assim #>   Gs #>   Ci #>   GrossAssim #>  #> Module type (differential or direct): #>   direct #>  #> Requires a fixed step size Euler ode_solver: #>   no #>   # Example 2: getting the inputs to the 'BioCro' module library's # 'thermal_time_linear' module, generating a default input list, and using it to # run the module info <- module_info('BioCro:thermal_time_linear', verbose = FALSE) inputs <- quantity_list_from_names(info$inputs) # All inputs will be set to 1 outputs <- evaluate_module('BioCro:thermal_time_linear', inputs)  # Example 3: calculating the temperature response of light saturated net # assimilation at several values of relative humidity in the absence of water # stress using the 'BioCro' module library's 'c3_assimilation' module and # the default soybean parameters. Here, the leaf temperature and humidity values # are independent of each other, so we use the `expand.grid` function to form a # data frame of all possible combinations of their values. rc <- module_response_curve(   'BioCro:c3_assimilation',   within(soybean$parameters, {Qp = 2000; StomataWS = 1}),   expand.grid(     Tleaf = seq(from = 0, to = 40, length.out = 201),     rh = c(0.2, 0.5, 0.8)   ) ) caption <- paste(   \"Response curves calculated with several RH\\nvalues and Q =\",   unique(rc$Qp),   \"micromol / m^2 / s\\nusing the\",   unique(rc$module_name),   \"module\" ) lattice::xyplot(   Assim ~ Tleaf,   group = rh,   data = rc,   auto = TRUE,   type = 'l',   main = caption )"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBea.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation field data — obsBea","title":"Miscanthus assimilation field data — obsBea","text":"Assimilation Miscanthus measured Beale, Bint, Long 1996.      first column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius). Relative humidity     reported thus assumed 0.7.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation field data — obsBea","text":"Data frame dimensions 27 4.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation field data — obsBea","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267--273.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBeaC.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Miscanthus assimilation field data — obsBeaC","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Assimilation stomatal conductance Miscanthus measured Beale, Bint, Long     1996.  (Missing data also included.)  first column     date, second hour. Columns 3 4 assimilation     stomatal conductance respectively.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBeaC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Data frame dimensions 35 6.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBeaC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267--273.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsBeaC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"third column observed net assimilation rate (micromoles m^-2 s^-1). fifth column observed quantum flux (micromoles m^-2 s^-1). sixth column temperature (degrees Celsius).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsNaid.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation data — obsNaid","title":"Miscanthus assimilation data — obsNaid","text":"Assimilation Miscanthus measured Naidu et al. (2003). first     column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius).     fourth column observed relative humidity proportion (e.g. 0.7).","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsNaid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation data — obsNaid","text":"Data frame dimensions 16 4.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/obsNaid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation data — obsNaid","text":"S. L. Naidu, S. P. Moose, . K. AL-Shoaibi, C. . Raines, S. P.     Long.  2003. Cold Tolerance C4 photosynthesis Miscanthus x giganteus:     Adaptation Amounts Sequence C4 Photosynthetic Enzymes.     Plant Physiol. 132 (3): 1688--1697.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Functions for Partial Application — partial_application","title":"Convenience Functions for Partial Application — partial_application","text":"Convenience functions using partial application BioCro","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"partial_run_biocro(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     ode_solver = BioCro:::default_ode_solver,     arg_names,     verbose = FALSE )  partial_evaluate_module(module_name, input_quantities, arg_names)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Functions for Partial Application — partial_application","text":"arg_names vector strings specifying input quantities whose values     fixed using partial application. initial_values Identical corresponding argument run_biocro. parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro. ode_solver Identical corresponding argument run_biocro. verbose Identical corresponding argument run_biocro. module_name Identical corresponding argument evaluate_module. input_quantities list named numeric elements representing input quantities required     module included arg_names; extraneous     quantities ignored module.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience Functions for Partial Application — partial_application","text":"Partial application technique fixing input   arguments function, producing new function fewer inputs.   context BioCro, partial application can often useful varying   parameters, initial values, drivers performing optimization   sensitivity analysis. Optimizers (optim)   typically require function single input argument, partial   application tools provided help create functions. partial_run_biocro partial_evaluate_module accept   arguments \"regular\" counterparts (run_biocro   evaluate_module) addition arg_names,   specifies input quantities fixed. partial_run_biocro, element arg_names must   name quantity one initial_values,   parameters, drivers. partial_evaluate_module,   element arg_names must name one module's input   quantities. using one pre-defined crop growth models, may helpful   use command pass arguments partial_run_biocro;   see documentation crop_model_definitions   information.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Functions for Partial Application — partial_application","text":"partial_run_biocro function calls run_biocro inputs     (except specified arg_names) set values specified     original call partial_run_biocro. new function one     input (x), can vector list specifying values     quantities arg_names. x names, elements must     supplied order original arg_names.     x names, must identical elements     arg_names can order. Elements x corresponding     drivers must vectors length drivers;     can specified named element list sequential elements     vector without names. return value new function data frame     produced run_biocro. partial_evaluate_module function calls evaluate_module input     quantities (except specified arg_names) set values     specified original call partial_evaluate_module. new     function one input (x), can vector list specifying     values quantities arg_names. x names,     elements must supplied order original     arg_names. x names, must identical     elements arg_names can order. return value     new function list two elements (inputs     outputs), list named numeric elements     representing module's input output values. (Note differs     output evaluate_module, returns outputs.)","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/partial_application.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"# Specify weather data to use in these examples ex_weather <- get_growing_season_climate(weather$'2005')  # Example 1: varying the thermal time values at which senescence starts for # different organs in a simulation; here we set them to the following values # instead of the defaults: #  - seneLeaf: 2000 degrees C * day #  - seneStem: 2100 degrees C * day #  - seneRoot: 2200 degrees C * day #  - seneRhizome: 2300 degrees C * day senescence_simulation <- partial_run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   ex_weather,   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver,   c('seneLeaf', 'seneStem', 'seneRoot', 'seneRhizome') ) senescence_result <- senescence_simulation(c(2000, 2100, 2200, 2300))  # Example 2: a crude method for simulating the effects of climate change; here # we increase the atmospheric CO2 concentration to 500 ppm and the temperature # by 2 degrees C relative to 2005 temperatures. The commands below that call # `temperature_simulation` all produce the same result. temperature_simulation <- partial_run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   ex_weather,   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver,   c(\"Catm\", \"temp\") ) hot_result_1 <- temperature_simulation(c(500, ex_weather$temp + 2.0)) hot_result_2 <- temperature_simulation(list(Catm = 500, temp = ex_weather$temp + 2.0)) hot_result_3 <- temperature_simulation(list(temp = ex_weather$temp + 2.0, Catm = 500))  # Note that these commands will both produce errors: # hot_result_4 <- temperature_simulation(c(Catm = 500, temp = ex_weather$temp + 2.0)) # hot_result_5 <- temperature_simulation(stats::setNames( #   c(500, ex_weather$temp + 2.0), #   c(\"Catm\", rep(\"temp\", length(ex_weather$temp))) # ))  # Note that this command will produce a strange result where the first # temperature value will be incorrectly interpreted as a `Catm` value, and the # `Catm` value will be interpreted as the final temperature value. # hot_result_6 <- temperature_simulation(c(ex_weather$temp + 2.0, 500))  # Example 3: varying the base and air temperature inputs to the # 'thermal_time_linear' module from the 'BioCro' module library. The commands # below that call `thermal_time_rate` all produce the same result. thermal_time_rate <- partial_evaluate_module(   'BioCro:thermal_time_linear',   within(miscanthus_x_giganteus$parameters, {time = 1}),   c(\"temp\", \"tbase\") ) rate_result_1 <- thermal_time_rate(c(25, 10)) rate_result_2 <- thermal_time_rate(c(temp = 25, tbase = 10)) rate_result_3 <- thermal_time_rate(c(tbase = 10, temp = 25)) rate_result_4 <- thermal_time_rate(list(temp = 25, tbase = 10)) rate_result_5 <- thermal_time_rate(list(tbase = 10, temp = 25))"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Crop Growth with BioCro — run_biocro","title":"Simulate Crop Growth with BioCro — run_biocro","text":"Runs full crop growth simulation using BioCro framework","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"run_biocro(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     ode_solver = BioCro:::default_ode_solver,     verbose = FALSE )"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Crop Growth with BioCro — run_biocro","text":"initial_values list named quantities representing initial values     differential quantities, .e., quantities whose derivatives     calculated differential modules parameters list named quantities change time; must include     'timestep' parameter (see `drivers` info) drivers data frame quantities defined equally spaced time intervals.     time interval specified `parameters` quantity called     'timestep' units hours. drivers must include columns     either (1) 'time' (units days) (2) 'doy' 'hour'. direct_module_names character vector list fully-qualified names direct     modules use system; lists available modules can obtained via     get_all_modules function. differential_module_names character vector list fully-qualified names differential     modules use system; lists available modules can obtained via     get_all_modules function. ode_solver list specifying details numerical ODE solver. required     elements : type: string specifying name algorithm use;             list available options can obtained using             get_all_ode_solvers function. output_step_size: output step size. smaller 1,             equal 1.0 / N integer N. larger 1,             integer. adaptive_rel_error_tol: used set relative error             tolerance adaptive step size methods adaptive_abs_error_tol: used set absolute error             tolerance adaptive step size methods adaptive_max_steps: determines many times adaptive             step size method attempt find new step size             indicating failure  verbose logical variable indicating whether print dynamical system     validation information. (detailed startup information can obtained     validate_dynamical_system_inputs function.)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Crop Growth with BioCro — run_biocro","text":"run_biocro important function BioCro package.   input arguments function used define dynamical system   solve time evolution desired time period. details   function operates, see Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ]. using one pre-defined crop growth models, may helpful   use command pass arguments run_biocro; see   documentation crop_model_definitions information.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Crop Growth with BioCro — run_biocro","text":"data frame column represents one quantities included   simulation (exception parameters, since values   guaranteed change time) row represents time point","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/run_biocro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"# Example: running a miscanthus simulation using weather data from 2005 result <- run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   get_growing_season_climate(weather$'2005'),   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver )  lattice::xyplot(   Leaf + Stem + Root + Grain ~ TTc,   data=result,   type='l',   auto=TRUE )"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/simultaneous_equations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simultaneous equations — simultaneous_equations","title":"Simultaneous equations — simultaneous_equations","text":"functions intended use Ed. documentation   avoid warnings R CMD check intended actually   describe functions used.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/simultaneous_equations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simultaneous equations — simultaneous_equations","text":"","code":"solve_simultaneous_equations(     direct_modules,     known_quantities,     unknown_quantities,     lower_bounds,     upper_bounds,     abs_error_tols,     rel_error_tols,     max_it = 50,     solver_type = \"newton_raphson_backtrack_boost\",     silent = FALSE   )    validate_simultaneous_equations(     direct_modules,     known_quantities,     unknown_quantities,     silent = FALSE   )    test_simultaneous_equations(     direct_modules,     known_quantities,     unknown_quantities   )    get_all_se_solvers()"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/simultaneous_equations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simultaneous equations — simultaneous_equations","text":"abs_error_tols Please ignore . direct_modules Please ignore . known_quantities Please ignore . lower_bounds Please ignore . max_it Please ignore . rel_error_tols Please ignore . silent Please ignore . solver_type Please ignore . unknown_quantities Please ignore . upper_bounds Please ignore .","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/simultaneous_equations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simultaneous equations — simultaneous_equations","text":"solve_simultaneous_equations Please ignore . validate_simultaneous_equations Please ignore . test_simultaneous_equations Please ignore . get_all_se_solvers Please ignore .","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soil_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil properties — soil_parameters","title":"Soil properties — soil_parameters","text":"collection soil property data.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soil_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil properties — soil_parameters","text":"","code":"soil_parameters"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soil_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil properties — soil_parameters","text":"list named elements, element represents hydraulic   properties one type soil. soil types defined following   USDA soil texture classification   scheme, 11 12 possible types included (\"silt\"   available). following names used indicate various soil types: sand loamy_sand sandy_loam loam silt_loam sandy_clay_loam clay_loam silty_clay_loam sandy_clay silty_clay clay soil type, following parameter values provided: soil_silt_content (dimensionless) soil_clay_content (dimensionless) soil_sand_content (dimensionless) soil_air_entry (J / kg) soil_b_coefficient (dimensionless) soil_saturated_conductivity (J * s / m^3) soil_saturation_capacity (dimensionless) soil_field_capacity (dimensionless) soil_wilting_point (dimensionless) soil_bulk_density (Mg / m^3)","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soil_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil properties — soil_parameters","text":"soil property values based Table 9.1 Campbell Norman's   textbook Introduction Environmental Biophysics (1998). Bulk   density values taken function getsoilprop.c Melanie   (Colorado). bulk density sand getsoilprop.c 0,   sensible, value 1.60 Mg / m^3 used instead. wilting point value 0.21 (corrected 0.32) silty clay loam   based list book corrections available   Brian Hornbuckle's teaching website   using Wayback Machine, since seem available   current site.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/sorghum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorghum model definition — sorghum","title":"Sorghum model definition — sorghum","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run sorghum growth   simulations Champaign, Illinois locations. Note model   published. represent sorghum growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/sorghum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorghum model definition — sorghum","text":"","code":"sorghum"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/sorghum.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sorghum model definition — sorghum","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean.html","id":null,"dir":"Reference","previous_headings":"","what":"Soybean-BioCro model definition — soybean","title":"Soybean-BioCro model definition — soybean","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run soybean growth   simulations Champaign, Illinois locations. Along soybean   circadian clock specifications (soybean_clock), values   define soybean growth model Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ], commonly referred   Soybean-BioCro. represent soybean growth Champaign, IL, values must paired   Champaign weather data (cmi_soybean_weather_data).   weather data includes output soybean circadian clock model   (soybean_clock), clock components need   included running soybean growth simulation using weather data.   parameters already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soybean-BioCro model definition — soybean","text":"","code":"soybean"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soybean-BioCro model definition — soybean","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soybean-BioCro model definition — soybean","text":"model described detail Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ]. make notes   components: model, ODE solver type     boost_rosenbrock auto (defaults     boost_rosenbrock fixed step size Euler ODE solver     required, case) since integration fail unless     tolerances stringent (e.g., output_step_size = 0.01,     adaptive_rel_error_tol = 1e-9, adaptive_abs_error_tol = 1e-9). initial total seed mass per land area, use following     equation: Number seeds per meter * weight per seed / row spacing.     number seeds per meter 20 row spacing 0.38 m,     reported Morgan et al. (2004) [doi:10.1104/pp.104.043968 ].     weight per seed based average .12 .18 grams, reported     Feedipedia. Thus,     initial biomass     (20 seeds / m) * (0.15 g / seed) / (0.38 m) = 7.89 g / m^2,     equivalent 0.0789 Mg / ha typical BioCro units. Since     model seed component, value used determine     initial Leaf, Stem, Root biomass, assuming 80%     leaf, 10% stem, 10% root. historical reasons, reproductive tissue model     called Grain interpreted pod biomass,     also includes seeds mass. historical reasons, model includes Rhizome tissue.     Soybean rhizome, rhizome model grow     senesce. achieve , kRhizome_emr     rateSeneRhizome parameters must set 0. also necessary     specify values several quantities alphaSeneRhizome,     betaSeneRhizome, initial rhizome mass, although actual     values quantities effect simulation output. historical reasons, modules define Soybean-BioCro     require input quantities actually used calculations;     \"extraneous\" parameters identified data/soybean.R. sowing_time input     soybean_development_rate_calculator module set 0     Soybean-BioCro uses weather data set sowing time. words,     weather data truncated begins sowing date.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean_clock.html","id":null,"dir":"Reference","previous_headings":"","what":"Soybean-BioCro circadian clock model definition — soybean_clock","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run soybean circadian clock   simulations Champaign, Illinois locations. Along soybean   growth specifications (soybean), values define soybean   growth model Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ], commonly referred   Soybean-BioCro. represent soybean circadian clock Champaign, Illinois, values   must paired weather data cmi_weather_data.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean_clock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"","code":"soybean_clock"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean_clock.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/soybean_clock.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"model described detail Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ] Lochocki & McGrath (2021)   [doi:10.1093/insilicoplants/diab016 ]. , use initial phases dawn dusk oscillators 200.0   80.0 radians, respectively. values optimized   simulations beginning midnight January 1, require minimal   time transient signals die . values determined   running simulation one year starting January 1, recording   oscillator states end December 31.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/system_derivatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Derivatives for Differential Quantities — system_derivatives","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"Solving BioCro model using one R's available differential equation   solvers","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/system_derivatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"system_derivatives(   parameters = list(),   drivers,   direct_module_names = list(),   differential_module_names = list() )"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/system_derivatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/system_derivatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"system_derivatives accepts input arguments  run_biocro exceptions ode_solver  initial_values; function intended passed ODE solver   R, solve system's time dependence diffferential   quantities evolve initial values, ode_solver  initial_values required . return value system_derivatives function three inputs   (t, differential_quantities, parms) returns   derivatives differential quantities dynamical system   determined original inputs (parameters, drivers,  direct_module_names,  differential_module_names). function signature requirements inputs set  LSODES function deSolve package. t input   single time value differential_quantities input   vector names differential quantities defined   modules. parms required LSODES, use   anything. function can passed LSODES alternative integration   method, rather using one BioCro's built-solvers. using one pre-defined crop growth models, may helpful   use command pass arguments system_derivatives;   see documentation crop_model_definitions   information.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/system_derivatives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"# Example 1: calculating a single derivative using a soybean model  soybean_system <- system_derivatives(   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules )  derivs <- soybean_system(0, unlist(soybean$initial_values), NULL)  # Example 2: a simple oscillator with only one module (requires deSolve)  if (FALSE) {  times = seq(0, 5, length=100)  oscillator_system_derivatives <- system_derivatives(   list(     timestep = 1,     mass = 1,     spring_constant = 1   ),   data.frame(time=times),   c(),   'BioCro:harmonic_oscillator' )  result <- as.data.frame(deSolve::lsodes(   c(position=0, velocity=1),   times,   oscillator_system_derivatives ))  lattice::xyplot(   position + velocity ~ time,   type='l',   auto=TRUE,   data=result ) }  # Example 3: solving 500 hours of a soybean simulation. This requires the # deSolve package and will run very slow compared to a regular call to # `run_biocro`.  if (FALSE) {  soybean_system <- system_derivatives(   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules )  times = seq(from=0, to=500, by=1)  result <- as.data.frame(deSolve::lsodes(unlist(soybean$initial_values), times, soybean_system))  lattice::xyplot(Leaf + Stem ~ time, type='l', auto=TRUE, data=result) }"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BioCro module test cases — test_module","title":"Run BioCro module test cases — test_module","text":"Modules can tested using test cases, sets known outputs   correspond particular inputs. functions provide ways create   test cases test modules. test_module runs one test case module, returning error message   output match expected value. case helps define test cases module testing combining   required elements list correct names required   test_module. cases_from_csv helps define test cases module testing creating   list test cases csv file.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BioCro module test cases — test_module","text":"","code":"test_module(module_name, case_to_test)    case(inputs, expected_outputs, description)    cases_from_csv(module_name, directory)"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BioCro module test cases — test_module","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. case_to_test list three named elements describe module test case: inputs: list module inputs, .e., list named             numeric elements corresponding module's input quantities. expected_outputs: list expected module outputs, .e.,             list named numeric elements corresponding expected values             module's output quantities. description: string describing test case, e.g.             \"temp tbase\". description succinct             contain newline characters.  inputs See corresponding entry test_case . expected_outputs See corresponding entry test_case . description See corresponding entry test_case . directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases')","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run BioCro module test cases — test_module","text":"test_module function forms basis BioCro module testing   system. (See module_testing information.) functions   case cases_from_csv complementary test_module   help pass suitably-formatted test cases test_module.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BioCro module test cases — test_module","text":"test_module test passes, empty string; otherwise, informative message     went wrong. case list three named elements (inputs, expected_outputs,     description) formed input arguments. cases_from_csv list test cases created case function     suitable passing test_module function.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BioCro module test cases — test_module","text":"","code":"# Example 1: Defining an individual test case for the 'BioCro' module library's # 'thermal_time_linear' module and running the test. This test will pass, so the # return value will be an empty string: `character(0)` test_module(   'BioCro:thermal_time_linear',   case(     list(time = 101, sowing_time = 100, tbase = 20, temp = 44),     list(TTc = 1.0),     'temp above tbase'   ) ) #> character(0)  # Example 2: Defining an individual test case for the 'BioCro' module library's # 'thermal_time_linear' module and running the test. This test will fail, so the # return value will be a message indicating the failure. test_module(   'BioCro:thermal_time_linear',   case(     list(time = 101, sowing_time = 100, tbase = 20, temp = 44),     list(TTc = 2.0),     'temp above tbase'   ) ) #> [1] \"Module `BioCro:thermal_time_linear` test case `temp above tbase`: calculated outputs do not match expected outputs\"  # Example 3: Loading a set of test cases from a file and running one of them. # Note: here we use the `initialize_csv` function first to ensure that there is # a properly defined test file in the current directory.  if (FALSE) {  module_name <- 'BioCro:thermal_time_linear' initialize_csv(module_name, '.') cases <- cases_from_csv(module_name, '.') test_module(module_name, cases[[1]]) }"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Run module test cases for an entire BioCro module library — test_module_library","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"Modules can tested using test cases, sets known outputs   correspond particular inputs. test_module_library function   provides way run test cases modules BioCro module   library.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"","code":"test_module_library(library_name, directory, modules_to_skip = c())"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"library_name name BioCro module library. directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases') modules_to_skip vector local module name strings indicating modules     library tested. feature used sparingly,     since legitimate reasons skip module test.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/test_module_library.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"module specified library, test_module_library loads   stored test cases specified directory runs test case,   storing information test failures issues may occur.   problems detected, test_module_library throws error   message describing issues. example function can used along   testthat package, see   tests/testthat/test.Modules.R.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/willow.html","id":null,"dir":"Reference","previous_headings":"","what":"Willow model definition — willow","title":"Willow model definition — willow","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run willow growth   simulations Champaign, Illinois locations. represent willow growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/willow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Willow model definition — willow","text":"","code":"willow"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/willow.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Willow model definition — willow","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/willow.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Willow model definition — willow","text":"model originally described Wang et al. (2015)   [doi:10.1111/pce.12556 ]. Since original parameterization, behavior   several core modules changed bugs identified   fixed, model likely needs reparameterized can used   realistic simulations.","code":""},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/zea_mays.html","id":null,"dir":"Reference","previous_headings":"","what":"Zea mays model definition — zea_mays","title":"Zea mays model definition — zea_mays","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run Zea mays (maize,   AKA corn) growth simulations Champaign, Illinois locations. Note   model published validated experimental data. represent maize growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/zea_mays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zea mays model definition — zea_mays","text":"","code":"zea_mays"},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/reference/zea_mays.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zea mays model definition — zea_mays","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":[]},{"path":[]},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"MAJOR CHANGES","title":"CHANGES IN BioCro VERSION 2.0.0","text":"Make easier reuse modules species, C3 photosynthesis modules. Make easier swap related modules comparison, example, comparing Farquhar-von-Caemmerer-Berry model radiation use efficiency model. Simplify parameter optimization sensitivity analysis providing interface readily useable common optimizers similar functions. Practical Guide BioCro Quantitative Comparison Two Photosynthesis Models Introduction BioCro Want Add Models","code":""},{"path":"https://ebimodeling.github.io/biocro-dev-documentation/add_new_vignette/pkgdown/news/index.html","id":"biocro-version-0951","dir":"Changelog","previous_headings":"","what":"BioCro VERSION 0.951","title":"BioCro VERSION 0.951","text":"last release original version BioCro, first described Miguez et al., 2009 updated years add crop models R functions. full change log version previous versions available document.","code":""}]
